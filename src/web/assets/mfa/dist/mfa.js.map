{"version":3,"file":"mfa.js","mappings":"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","sources":["webpack:///../../../../../node_modules/@simplewebauthn/browser/dist/bundle/index.js","webpack:///./js/mfa.js","webpack:///./js/WebAuthnSetup.js","webpack:///./js/MfaLogin.js"],"sourcesContent":["/* [@simplewebauthn/browser@7.1.0] */\nfunction utf8StringToBuffer(value) {\n    return new TextEncoder().encode(value);\n}\n\nfunction bufferToBase64URLString(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let str = '';\n    for (const charCode of bytes) {\n        str += String.fromCharCode(charCode);\n    }\n    const base64String = btoa(str);\n    return base64String.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nfunction base64URLStringToBuffer(base64URLString) {\n    const base64 = base64URLString.replace(/-/g, '+').replace(/_/g, '/');\n    const padLength = (4 - (base64.length % 4)) % 4;\n    const padded = base64.padEnd(base64.length + padLength, '=');\n    const binary = atob(padded);\n    const buffer = new ArrayBuffer(binary.length);\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return buffer;\n}\n\nfunction browserSupportsWebAuthn() {\n    return ((window === null || window === void 0 ? void 0 : window.PublicKeyCredential) !== undefined && typeof window.PublicKeyCredential === 'function');\n}\n\nfunction toPublicKeyCredentialDescriptor(descriptor) {\n    const { id } = descriptor;\n    return {\n        ...descriptor,\n        id: base64URLStringToBuffer(id),\n        transports: descriptor.transports,\n    };\n}\n\nfunction isValidDomain(hostname) {\n    return (hostname === 'localhost' || /^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$/i.test(hostname));\n}\n\nclass WebAuthnError extends Error {\n    constructor(message, name = 'WebAuthnError') {\n        super(message);\n        this.name = name;\n    }\n}\n\nfunction identifyRegistrationError({ error, options, }) {\n    var _a, _b;\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal === new AbortController().signal) {\n            return new WebAuthnError('Registration ceremony was sent an abort signal', 'AbortError');\n        }\n    }\n    else if (error.name === 'ConstraintError') {\n        if (((_a = publicKey.authenticatorSelection) === null || _a === void 0 ? void 0 : _a.requireResidentKey) === true) {\n            return new WebAuthnError('Discoverable credentials were required but no available authenticator supported it', 'ConstraintError');\n        }\n        else if (((_b = publicKey.authenticatorSelection) === null || _b === void 0 ? void 0 : _b.userVerification) === 'required') {\n            return new WebAuthnError('User verification was required but no available authenticator supported it', 'ConstraintError');\n        }\n    }\n    else if (error.name === 'InvalidStateError') {\n        return new WebAuthnError('The authenticator was previously registered', 'InvalidStateError');\n    }\n    else if (error.name === 'NotAllowedError') ;\n    else if (error.name === 'NotSupportedError') {\n        const validPubKeyCredParams = publicKey.pubKeyCredParams.filter(param => param.type === 'public-key');\n        if (validPubKeyCredParams.length === 0) {\n            return new WebAuthnError('No entry in pubKeyCredParams was of type \"public-key\"', 'NotSupportedError');\n        }\n        return new WebAuthnError('No available authenticator supported any of the specified pubKeyCredParams algorithms', 'NotSupportedError');\n    }\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError(`${window.location.hostname} is an invalid domain`, 'SecurityError');\n        }\n        else if (publicKey.rp.id !== effectiveDomain) {\n            return new WebAuthnError(`The RP ID \"${publicKey.rp.id}\" is invalid for this domain`, 'SecurityError');\n        }\n    }\n    else if (error.name === 'TypeError') {\n        if (publicKey.user.id.byteLength < 1 || publicKey.user.id.byteLength > 64) {\n            return new WebAuthnError('User ID was not between 1 and 64 characters', 'TypeError');\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        return new WebAuthnError('The authenticator was unable to process the specified options, or could not create a new credential', 'UnknownError');\n    }\n    return error;\n}\n\nclass WebAuthnAbortService {\n    createNewAbortSignal() {\n        if (this.controller) {\n            this.controller.abort('Cancelling existing WebAuthn API call for new one');\n        }\n        const newController = new AbortController();\n        this.controller = newController;\n        return newController.signal;\n    }\n}\nconst webauthnAbortService = new WebAuthnAbortService();\n\nconst attachments = ['cross-platform', 'platform'];\nfunction toAuthenticatorAttachment(attachment) {\n    if (!attachment) {\n        return;\n    }\n    if (attachments.indexOf(attachment) < 0) {\n        return;\n    }\n    return attachment;\n}\n\nasync function startRegistration(creationOptionsJSON) {\n    var _a;\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    const publicKey = {\n        ...creationOptionsJSON,\n        challenge: base64URLStringToBuffer(creationOptionsJSON.challenge),\n        user: {\n            ...creationOptionsJSON.user,\n            id: utf8StringToBuffer(creationOptionsJSON.user.id),\n        },\n        excludeCredentials: (_a = creationOptionsJSON.excludeCredentials) === null || _a === void 0 ? void 0 : _a.map(toPublicKeyCredentialDescriptor),\n    };\n    const options = { publicKey };\n    options.signal = webauthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = (await navigator.credentials.create(options));\n    }\n    catch (err) {\n        throw identifyRegistrationError({ error: err, options });\n    }\n    if (!credential) {\n        throw new Error('Registration was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    let transports = undefined;\n    if (typeof response.getTransports === 'function') {\n        transports = response.getTransports();\n    }\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            attestationObject: bufferToBase64URLString(response.attestationObject),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            transports,\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment),\n    };\n}\n\nfunction bufferToUTF8String(value) {\n    return new TextDecoder('utf-8').decode(value);\n}\n\nasync function browserSupportsWebAuthnAutofill() {\n    const globalPublicKeyCredential = window.PublicKeyCredential;\n    return (globalPublicKeyCredential.isConditionalMediationAvailable !== undefined &&\n        globalPublicKeyCredential.isConditionalMediationAvailable());\n}\n\nfunction identifyAuthenticationError({ error, options, }) {\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal === new AbortController().signal) {\n            return new WebAuthnError('Authentication ceremony was sent an abort signal', 'AbortError');\n        }\n    }\n    else if (error.name === 'NotAllowedError') ;\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError(`${window.location.hostname} is an invalid domain`, 'SecurityError');\n        }\n        else if (publicKey.rpId !== effectiveDomain) {\n            return new WebAuthnError(`The RP ID \"${publicKey.rpId}\" is invalid for this domain`, 'SecurityError');\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        return new WebAuthnError('The authenticator was unable to process the specified options, or could not create a new assertion signature', 'UnknownError');\n    }\n    return error;\n}\n\nasync function startAuthentication(requestOptionsJSON, useBrowserAutofill = false) {\n    var _a, _b;\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    let allowCredentials;\n    if (((_a = requestOptionsJSON.allowCredentials) === null || _a === void 0 ? void 0 : _a.length) !== 0) {\n        allowCredentials = (_b = requestOptionsJSON.allowCredentials) === null || _b === void 0 ? void 0 : _b.map(toPublicKeyCredentialDescriptor);\n    }\n    const publicKey = {\n        ...requestOptionsJSON,\n        challenge: base64URLStringToBuffer(requestOptionsJSON.challenge),\n        allowCredentials,\n    };\n    const options = {};\n    if (useBrowserAutofill) {\n        if (!(await browserSupportsWebAuthnAutofill())) {\n            throw Error('Browser does not support WebAuthn autofill');\n        }\n        const eligibleInputs = document.querySelectorAll(\"input[autocomplete*='webauthn']\");\n        if (eligibleInputs.length < 1) {\n            throw Error('No <input> with `\"webauthn\"` in its `autocomplete` attribute was detected');\n        }\n        options.mediation = 'conditional';\n        publicKey.allowCredentials = [];\n    }\n    options.publicKey = publicKey;\n    options.signal = webauthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = (await navigator.credentials.get(options));\n    }\n    catch (err) {\n        throw identifyAuthenticationError({ error: err, options });\n    }\n    if (!credential) {\n        throw new Error('Authentication was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    let userHandle = undefined;\n    if (response.userHandle) {\n        userHandle = bufferToUTF8String(response.userHandle);\n    }\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            authenticatorData: bufferToBase64URLString(response.authenticatorData),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            signature: bufferToBase64URLString(response.signature),\n            userHandle,\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment),\n    };\n}\n\nasync function platformAuthenticatorIsAvailable() {\n    if (!browserSupportsWebAuthn()) {\n        return false;\n    }\n    return PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n}\n\nexport { browserSupportsWebAuthn, browserSupportsWebAuthnAutofill, platformAuthenticatorIsAvailable, startAuthentication, startRegistration };\n","import {browserSupportsWebAuthn} from '@simplewebauthn/browser';\n\n(function ($) {\n  /** global: Craft */\n  /** global: Garnish */\n  Craft.Mfa = Garnish.Base.extend(\n    {\n      $mfaLoginFormContainer: null,\n      $mfaSetupFormContainer: null,\n      $alternativeMfaLink: null,\n      $alternativeMfaTypesContainer: null,\n      $viewSetupBtns: null,\n      $errors: null,\n\n      $slideout: null,\n      $removeSetupButton: null,\n      $closeButton: null,\n      $verifyButton: null,\n\n      init: function (settings) {\n        this.$mfaLoginFormContainer = $('#mfa-form');\n        this.$mfaSetupFormContainer = $('#mfa-setup');\n        this.$alternativeMfaLink = $('#alternative-mfa');\n        this.$alternativeMfaTypesContainer = $('#alternative-mfa-types');\n        this.$viewSetupBtns = this.$mfaSetupFormContainer.find(\n          'button.mfa-view-setup'\n        );\n\n        this.setSettings(settings, Craft.Mfa.defaults);\n\n        this.addListener(\n          this.$alternativeMfaLink,\n          'click',\n          'onAlternativeMfaTypeClick'\n        );\n        this.addListener(this.$viewSetupBtns, 'click', 'onViewSetupBtnClick');\n      },\n\n      showMfaForm: function (mfaForm, $loginDiv) {\n        this.$mfaLoginFormContainer.html('').append(mfaForm);\n        $loginDiv.addClass('mfa');\n        $('#login-form-buttons').hide();\n        const $submitBtn = this.$mfaLoginFormContainer.find('.submit');\n        this.$errors = $('#login-errors');\n\n        this.onSubmitResponse($submitBtn);\n      },\n\n      getCurrentMfaType: function ($container) {\n        let currentMethod = $container.attr('data-mfa-type');\n\n        if (currentMethod === undefined) {\n          currentMethod = null;\n        }\n\n        return currentMethod;\n      },\n\n      onViewSetupBtnClick: function (ev) {\n        const $button = $(ev.currentTarget);\n        $button.disable();\n        ev.preventDefault();\n\n        const data = {\n          selectedMethod: this.getCurrentMfaType($button),\n        };\n\n        Craft.sendActionRequest('POST', this.settings.setupSlideoutHtml, {data})\n          .then((response) => {\n            this.slideout = new Craft.Slideout(response.data.html);\n\n            this.$errors = this.slideout.$container.find('.so-notice');\n            this.$closeButton = this.slideout.$container.find('button.close');\n\n            // initialise webauthn\n            if (\n              data.selectedMethod === 'craft\\\\mfa\\\\type\\\\WebAuthn' &&\n              browserSupportsWebAuthn()\n            ) {\n              new Craft.WebAuthnSetup(this.slideout);\n            }\n\n            this.$verifyButton = this.slideout.$container.find('#mfa-verify');\n            this.$removeSetupButton =\n              this.slideout.$container.find('#mfa-remove-setup');\n\n            this.addListener(this.$removeSetupButton, 'click', 'onRemoveSetup');\n            this.addListener(this.$closeButton, 'click', 'onClickClose');\n            this.addListener(this.$verifyButton, 'click', 'onVerify');\n            this.addListener(this.slideout.$container, 'keypress', (ev) => {\n              if (ev.keyCode === Garnish.RETURN_KEY) {\n                this.$verifyButton.trigger('click');\n              }\n            });\n\n            this.slideout.on('close', (ev) => {\n              this.$removeSetupButton = null;\n              this.slideout = null;\n              $button.enable();\n            });\n          })\n          .catch(({response}) => {\n            // Add the error message\n            Craft.cp.displayError(response.data.message);\n            $button.enable();\n          });\n      },\n\n      onClickClose: function (ev) {\n        this.slideout.close();\n      },\n\n      onRemoveSetup: function (ev) {\n        ev.preventDefault();\n\n        let currentMethod = this.getCurrentMfaType(\n          this.slideout.$container.find('#mfa-setup-form')\n        );\n\n        if (currentMethod === undefined) {\n          currentMethod = null;\n        }\n\n        let data = {\n          currentMethod: currentMethod,\n        };\n\n        const confirmed = confirm(\n          Craft.t('app', 'Are you sure you want to delete this setup?')\n        );\n\n        if (confirmed) {\n          Craft.sendActionRequest('POST', this.settings.removeSetup, {data})\n            .then((response) => {\n              $(ev.currentTarget).remove();\n              Craft.cp.displayNotice(Craft.t('app', 'MFA setup removed.'));\n            })\n            .catch((e) => {\n              Craft.cp.displayError(e.response.data.message);\n            })\n            .finally(() => {\n              this.slideout.close();\n            });\n        }\n      },\n\n      onVerify: function (ev) {\n        ev.preventDefault();\n\n        const $submitBtn = this.slideout.$container.find('#mfa-verify');\n\n        $submitBtn.addClass('loading');\n\n        let data = {\n          mfaFields: {},\n          currentMethod: null,\n        };\n\n        data.mfaFields = this._getMfaFields(this.slideout.$container);\n        data.currentMethod = this._getCurrentMethodInput(\n          this.slideout.$container\n        );\n\n        Craft.sendActionRequest('POST', this.settings.saveSetup, {data})\n          .then((response) => {\n            this.onSubmitResponse($submitBtn);\n            Craft.cp.displayNotice(Craft.t('app', 'MFA settings saved.'));\n            this.slideout.close();\n          })\n          .catch(({response}) => {\n            this.onSubmitResponse($submitBtn);\n\n            // Add the error message\n            this.showError(response.data.message);\n            Craft.cp.displayError(response.data.message);\n          });\n      },\n\n      onSubmitResponse: function ($submitBtn) {\n        $submitBtn.removeClass('loading');\n      },\n\n      showError: function (error, $errorsContainer = null) {\n        this.clearErrors();\n\n        $('<p class=\"error\" style=\"display: none;\">' + error + '</p>')\n          .appendTo($errorsContainer !== null ? $errorsContainer : this.$errors)\n          .velocity('fadeIn');\n      },\n\n      clearErrors: function ($errorsContainer = null) {\n        if ($errorsContainer !== null) {\n          $errorsContainer.empty();\n        } else {\n          this.$errors.empty();\n        }\n      },\n\n      onAlternativeMfaTypeClick: function (event) {\n        // get current authenticator class via data-mfa-type\n        let currentMethod = this.getCurrentMfaType(\n          this.$mfaLoginFormContainer.find('#verifyContainer')\n        );\n        if (currentMethod === null) {\n          this.$alternativeMfaLink.hide();\n          this.showError(\n            Craft.t('app', 'No alternative MFA methods available.')\n          );\n        }\n\n        let data = {\n          currentMethod: currentMethod,\n        };\n\n        // get available MFA methods, minus the one that's being shown\n        this.getAlternativeMfaTypes(data);\n      },\n\n      getAlternativeMfaTypes: function (data) {\n        Craft.sendActionRequest(\n          'POST',\n          this.settings.fetchAlternativeMfaTypes,\n          {\n            data,\n          }\n        )\n          .then((response) => {\n            if (response.data.alternativeTypes !== undefined) {\n              this.showAlternativeMfaTypes(response.data.alternativeTypes);\n            }\n          })\n          .catch(({response}) => {\n            this.showError(response.data.message);\n          });\n      },\n\n      showAlternativeMfaTypes: function (data) {\n        let alternativeTypes = Object.entries(data).map(([key, value]) => ({\n          key,\n          value,\n        }));\n        if (alternativeTypes.length > 0) {\n          alternativeTypes.forEach((type) => {\n            this.$alternativeMfaTypesContainer.append(\n              '<li><button ' +\n                'class=\"alternative-mfa-type\" ' +\n                'type=\"button\" ' +\n                'value=\"' +\n                type.key +\n                '\">' +\n                type.value.name +\n                '</button></li>'\n            );\n          });\n        }\n\n        // list them by name\n        this.$alternativeMfaLink\n          .hide()\n          .after(this.$alternativeMfaTypesContainer);\n\n        // clicking on a method name swaps the form fields\n        this.addListener(\n          $('.alternative-mfa-type'),\n          'click',\n          'onSelectAlternativeMfaType'\n        );\n      },\n\n      onSelectAlternativeMfaType: function (event) {\n        const data = {\n          selectedMethod: $(event.currentTarget).attr('value'),\n        };\n\n        Craft.sendActionRequest('POST', this.settings.loadAlternativeMfaType, {\n          data,\n        })\n          .then((response) => {\n            if (response.data.mfaForm !== undefined) {\n              this.$mfaLoginFormContainer\n                .html('')\n                .append(response.data.mfaForm);\n              this.$alternativeMfaTypesContainer.html('');\n              this.$alternativeMfaLink.show();\n              this.onSubmitResponse();\n            }\n          })\n          .catch(({response}) => {\n            //this.showError(response.data.message);\n          });\n      },\n\n      _getMfaFields: function ($container) {\n        let mfaFields = {};\n\n        $container\n          .find('input[name^=\"mfaFields[')\n          .each(function (index, element) {\n            let name = $(element).attr('id');\n            mfaFields[name] = $(element).val();\n          });\n\n        return mfaFields;\n      },\n\n      _getCurrentMethodInput: function ($container) {\n        return $container.find('input[name=\"currentMethod\"').val();\n      },\n    },\n    {\n      defaults: {\n        fetchAlternativeMfaTypes: 'mfa/fetch-alternative-mfa-types',\n        loadAlternativeMfaType: 'mfa/load-alternative-mfa-type',\n        setupSlideoutHtml: 'mfa/setup-slideout-html',\n        saveSetup: 'mfa/save-setup',\n        removeSetup: 'mfa/remove-setup',\n      },\n    }\n  );\n})(jQuery);\n","import {browserSupportsWebAuthn} from '@simplewebauthn/browser';\nimport {startRegistration} from '@simplewebauthn/browser';\n\n(function ($) {\n  /** global: Craft */\n  /** global: Garnish */\n  Craft.WebAuthnSetup = Garnish.Base.extend(\n    {\n      $addSecurityKeyBtn: null,\n      $noticeContainer: null,\n      $keysTable: null,\n      slideout: null,\n\n      init: function (slideout, settings) {\n        this.slideout = slideout;\n        this.setSettings(settings, Craft.WebAuthnSetup.defaults);\n        this.$addSecurityKeyBtn = $('#add-security-key');\n        this.$noticeContainer = this.slideout.$container.find('.so-notice');\n        this.$keysTable = this.slideout.$container.find(\n          '#webauthn-security-keys'\n        );\n\n        if (!browserSupportsWebAuthn()) {\n          Craft.cp.displayError(\n            Craft.t('app', 'This browser does not support WebAuth.')\n          );\n          this.$addSecurityKeyBtn.disable();\n        }\n\n        this.addListener(\n          this.$addSecurityKeyBtn,\n          'click',\n          'onAddSecurityKeyBtn'\n        );\n\n        if (this.$keysTable !== null) {\n          this.addListener(\n            this.$keysTable.find('.delete'),\n            'click',\n            'onDeleteSecurityKey'\n          );\n        }\n      },\n\n      onAddSecurityKeyBtn: function (ev) {\n        if (!$(ev.currentTarget).hasClass('disabled')) {\n          this.showStatus(Craft.t('app', 'Waiting for elevated session'));\n          Craft.elevatedSessionManager.requireElevatedSession(\n            this.startWebAuthRegistration.bind(this),\n            this.failedElevation.bind(this)\n          );\n        }\n      },\n\n      failedElevation: function () {\n        this.clearStatus();\n      },\n\n      startWebAuthRegistration: function () {\n        this.clearStatus();\n\n        // GET registration options from the endpoint that calls\n        Craft.sendActionRequest(\n          'POST',\n          this.settings.generateRegistrationOptions\n        )\n          .then((response) => {\n            const registrationOptions = response.data.registrationOptions;\n            try {\n              this.showStatus(Craft.t('app', 'Starting registration'));\n              const credentialName = Craft.escapeHtml(\n                prompt(\n                  Craft.t('app', 'Please enter a name for the security key')\n                )\n              );\n              startRegistration(registrationOptions)\n                .then((regResponse) => {\n                  this.verifyWebAuthnRegistration(regResponse, credentialName);\n                })\n                .catch((regResponseError) => {\n                  this.showStatus(\n                    Craft.t('app', 'Registration failed:') +\n                      ' ' +\n                      regResponseError.message,\n                    'error'\n                  );\n                });\n            } catch (error) {\n              this.showStatus(error, 'error');\n            }\n          })\n          .catch(({response}) => {\n            this.showStatus(response.data.message, 'error');\n          });\n      },\n\n      verifyWebAuthnRegistration: function (\n        startRegistrationResponse,\n        credentialName\n      ) {\n        this.showStatus(Craft.t('app', 'Starting verification'));\n        let data = {\n          credentials: JSON.stringify(startRegistrationResponse),\n          credentialName: credentialName,\n        };\n\n        // POST the response to the endpoint\n        Craft.sendActionRequest('POST', this.settings.verifyRegistration, {\n          data,\n        })\n          .then((response) => {\n            this.clearStatus();\n            // Show UI appropriate for the `verified` status\n            if (response.data.verified) {\n              Craft.cp.displaySuccess(\n                Craft.t('app', 'Security key registered.')\n              );\n              if (response.data.html) {\n                this.slideout.$container.html(response.data.html);\n                this.init(this.slideout); //reinitialise\n              }\n            } else {\n              this.showStatus('Something went wrong!', 'error');\n            }\n          })\n          .catch(({response}) => {\n            this.showStatus(response.data.message, 'error');\n          });\n      },\n\n      onDeleteSecurityKey: function (ev) {\n        ev.preventDefault();\n\n        const $uid = $(ev.currentTarget).attr('data-uid');\n        const credentialName = $(ev.currentTarget)\n          .parents('tr')\n          .find('[data-name=\"credentialName\"]')\n          .text();\n\n        let data = {\n          uid: $uid,\n        };\n\n        const confirmed = confirm(\n          Craft.t(\n            'app',\n            'Are you sure you want to delete ‘{credentialName}‘ security key?',\n            {credentialName: credentialName}\n          )\n        );\n\n        if ($uid !== undefined && confirmed) {\n          Craft.sendActionRequest('POST', this.settings.deleteSecurityKey, {\n            data,\n          })\n            .then((response) => {\n              Craft.cp.displaySuccess(response.data.message);\n              if (response.data.html) {\n                this.slideout.$container.html(response.data.html);\n                this.init(this.slideout); //reinitialise\n              }\n            })\n            .catch(({response}) => {\n              this.showStatus(response.data.message, 'error');\n            });\n        }\n      },\n\n      showStatus: function (message, type) {\n        //Craft.cp.displayError(message);\n        if (type == 'error') {\n          this.$noticeContainer.addClass('error');\n        } else {\n          this.$noticeContainer.removeClass('error');\n        }\n        this.$noticeContainer.text(message);\n      },\n\n      clearStatus: function () {\n        this.$noticeContainer.text('');\n      },\n    },\n    {\n      defaults: {\n        generateRegistrationOptions: 'mfa/generate-registration-options',\n        verifyRegistration: 'mfa/verify-registration',\n        deleteSecurityKey: 'mfa/delete-security-key',\n      },\n    }\n  );\n})(jQuery);\n","import {startAuthentication} from '@simplewebauthn/browser';\n\n/** global: Craft */\n/** global: Garnish */\nCraft.MfaLogin = {\n  loginWithPassword: false,\n  loginWithSecurityKey: false,\n\n  startWebauthnLogin: function (data, inModal = false) {\n    return Craft.sendActionRequest('POST', 'users/start-webauthn-login', {data})\n      .then((response) => {\n        const authenticationOptions = response.data.authenticationOptions;\n        const userId = response.data.userId;\n        const duration = response.data.duration;\n\n        try {\n          return startAuthentication(authenticationOptions)\n            .then((authResponse) => {\n              return Promise.resolve(\n                Craft.MfaLogin.verifyWebAuthnLogin(\n                  authenticationOptions,\n                  authResponse,\n                  userId,\n                  duration,\n                  inModal\n                )\n              );\n            })\n            .catch((authResponseError) => {\n              return Promise.reject({success: false, error: authResponseError});\n            });\n        } catch (error) {\n          return Promise.reject({success: false, error: error});\n        }\n      })\n      .catch(({response}) => {\n        return Promise.reject({success: false, error: response.data.message});\n      });\n  },\n\n  verifyWebAuthnLogin: function (\n    authenticationOptions,\n    authResponse,\n    userId,\n    duration,\n    inModal\n  ) {\n    let data = {\n      userId: userId,\n      authenticationOptions: JSON.stringify(authenticationOptions),\n      authResponse: JSON.stringify(authResponse),\n      duration: duration,\n    };\n\n    return Craft.sendActionRequest('POST', 'users/webauthn-login', {data})\n      .then((response) => {\n        if (inModal) {\n          return Promise.resolve({success: true});\n        } else {\n          return Promise.resolve({\n            success: true,\n            returnUrl: response.data.returnUrl,\n          });\n        }\n      })\n      .catch(({response}) => {\n        return Promise.reject({success: false, error: response.data.message});\n      });\n  },\n\n  submitMfaCode: function ($mfaLoginFormContainer, inModal = false) {\n    let data = {\n      mfaFields: {},\n      currentMethod: null,\n    };\n\n    let mfa = new Craft.Mfa();\n\n    data.mfaFields = mfa._getMfaFields($mfaLoginFormContainer);\n    data.currentMethod = mfa._getCurrentMethodInput($mfaLoginFormContainer);\n\n    return Craft.sendActionRequest('POST', 'users/verify-mfa', {data})\n      .then((response) => {\n        if (inModal) {\n          return Promise.resolve({success: true});\n        } else {\n          return Promise.resolve({\n            success: true,\n            returnUrl: response.data.returnUrl,\n          });\n        }\n      })\n      .catch(({response}) => {\n        return Promise.reject({success: false, error: response.data.message});\n      });\n  },\n};\n"],"names":["bufferToBase64URLString","buffer","bytes","Uint8Array","str","charCode","String","fromCharCode","btoa","replace","base64URLStringToBuffer","base64URLString","base64","padLength","length","padded","padEnd","binary","atob","ArrayBuffer","i","charCodeAt","browserSupportsWebAuthn","undefined","window","PublicKeyCredential","toPublicKeyCredentialDescriptor","descriptor","id","transports","isValidDomain","hostname","test","WebAuthnError","Error","constructor","message","name","super","this","webauthnAbortService","createNewAbortSignal","controller","abort","newController","AbortController","signal","attachments","toAuthenticatorAttachment","attachment","indexOf","async","startAuthentication","requestOptionsJSON","useBrowserAutofill","_a","_b","allowCredentials","map","publicKey","challenge","options","globalPublicKeyCredential","isConditionalMediationAvailable","browserSupportsWebAuthnAutofill","document","querySelectorAll","mediation","credential","navigator","credentials","get","err","error","effectiveDomain","location","rpId","identifyAuthenticationError","rawId","response","type","userHandle","value","TextDecoder","decode","authenticatorData","clientDataJSON","signature","clientExtensionResults","getClientExtensionResults","authenticatorAttachment","$","jQuery","Craft","Mfa","Garnish","Base","extend","$mfaLoginFormContainer","$mfaSetupFormContainer","$alternativeMfaLink","$alternativeMfaTypesContainer","$viewSetupBtns","$errors","$slideout","$removeSetupButton","$closeButton","$verifyButton","init","settings","find","setSettings","defaults","addListener","showMfaForm","mfaForm","$loginDiv","html","append","addClass","hide","$submitBtn","onSubmitResponse","getCurrentMfaType","$container","currentMethod","attr","onViewSetupBtnClick","ev","$button","currentTarget","disable","preventDefault","data","selectedMethod","sendActionRequest","setupSlideoutHtml","then","slideout","Slideout","WebAuthnSetup","keyCode","RETURN_KEY","trigger","on","enable","cp","displayError","onClickClose","close","onRemoveSetup","confirm","t","removeSetup","remove","displayNotice","e","onVerify","mfaFields","_getMfaFields","_getCurrentMethodInput","saveSetup","showError","removeClass","$errorsContainer","clearErrors","appendTo","velocity","empty","onAlternativeMfaTypeClick","event","getAlternativeMfaTypes","fetchAlternativeMfaTypes","alternativeTypes","showAlternativeMfaTypes","Object","entries","key","forEach","after","onSelectAlternativeMfaType","loadAlternativeMfaType","show","each","index","element","val","$addSecurityKeyBtn","$noticeContainer","$keysTable","onAddSecurityKeyBtn","hasClass","showStatus","elevatedSessionManager","requireElevatedSession","startWebAuthRegistration","bind","failedElevation","clearStatus","generateRegistrationOptions","registrationOptions","credentialName","escapeHtml","prompt","creationOptionsJSON","user","TextEncoder","encode","excludeCredentials","create","authenticatorSelection","requireResidentKey","userVerification","pubKeyCredParams","filter","param","rp","byteLength","identifyRegistrationError","getTransports","attestationObject","startRegistration","regResponse","verifyWebAuthnRegistration","regResponseError","startRegistrationResponse","JSON","stringify","verifyRegistration","verified","displaySuccess","onDeleteSecurityKey","$uid","parents","text","uid","confirmed","deleteSecurityKey","MfaLogin","loginWithPassword","loginWithSecurityKey","startWebauthnLogin","inModal","authenticationOptions","userId","duration","authResponse","Promise","resolve","verifyWebAuthnLogin","authResponseError","reject","success","returnUrl","submitMfaCode","mfa"],"sourceRoot":""}