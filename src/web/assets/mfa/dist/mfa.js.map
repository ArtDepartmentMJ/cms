{"version":3,"file":"mfa.js","mappings":"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","sources":["webpack:///./mfa.js"],"sourcesContent":["(function ($) {\n  /** global: Craft */\n  /** global: Garnish */\n  Craft.Mfa = Garnish.Base.extend(\n    {\n      $mfaLoginFormContainer: null,\n      $mfaSetupFormContainer: null,\n      $alternativeMfaLink: null,\n      $alternativeMfaTypesContainer: null,\n      $viewSetupBtns: null,\n      $errors: null,\n\n      $slideout: null,\n      $removeSetupButton: null,\n      $closeButton: null,\n      $verifyButton: null,\n\n      init: function (settings) {\n        this.$mfaLoginFormContainer = $('#mfa-form');\n        this.$mfaSetupFormContainer = $('#mfa-setup');\n        this.$alternativeMfaLink = $('#alternative-mfa');\n        this.$alternativeMfaTypesContainer = $('#alternative-mfa-types');\n        this.$viewSetupBtns = this.$mfaSetupFormContainer.find(\n          'button.mfa-view-setup'\n        );\n\n        this.setSettings(settings, Craft.Mfa.defaults);\n\n        this.addListener(\n          this.$alternativeMfaLink,\n          'click',\n          'onAlternativeMfaTypeClick'\n        );\n        this.addListener(this.$viewSetupBtns, 'click', 'onViewSetupBtnClick');\n      },\n\n      showMfaForm: function (mfaForm, $loginDiv) {\n        this.$mfaLoginFormContainer.html('').append(mfaForm);\n        $loginDiv.addClass('mfa');\n        $('#login-form-buttons').hide();\n        const $submitBtn = this.$mfaLoginFormContainer.find('.submit');\n        this.$errors = $('#login-errors');\n\n        this.onSubmitResponse($submitBtn);\n      },\n\n      getCurrentMfaType: function ($container) {\n        let currentMethod = $container.attr('data-mfa-type');\n\n        if (currentMethod === undefined) {\n          currentMethod = null;\n        }\n\n        return currentMethod;\n      },\n\n      submitLoginMfa: function () {\n        const $submitBtn = this.$mfaLoginFormContainer.find('.submit');\n        $submitBtn.addClass('loading');\n\n        let data = {\n          mfaFields: {},\n          currentMethod: null,\n        };\n\n        data.mfaFields = this._getMfaFields(this.$mfaLoginFormContainer);\n        data.currentMethod = this._getCurrentMethodInput(\n          this.$mfaLoginFormContainer\n        );\n\n        Craft.sendActionRequest('POST', 'users/verify-mfa', {data})\n          .then((response) => {\n            window.location.href = response.data.returnUrl;\n          })\n          .catch(({response}) => {\n            this.onSubmitResponse($submitBtn);\n\n            // Add the error message\n            this.showError(response.data.message);\n          });\n      },\n\n      onViewSetupBtnClick: function (ev) {\n        ev.preventDefault();\n\n        const data = {\n          selectedMethod: this.getCurrentMfaType($(ev.currentTarget)),\n        };\n\n        Craft.sendActionRequest('POST', this.settings.setupSlideoutHtml, {data})\n          .then((response) => {\n            this.slideout = new Craft.Slideout(response.data.html);\n\n            this.$errors = this.slideout.$container.find('.so-notice');\n            this.$closeButton = this.slideout.$container.find('button.close');\n            this.$verifyButton = this.slideout.$container.find('#mfa-verify');\n            this.$removeSetupButton =\n              this.slideout.$container.find('#mfa-remove-setup');\n\n            this.addListener(this.$removeSetupButton, 'click', 'onRemoveSetup');\n            this.addListener(this.$closeButton, 'click', 'onClickClose');\n            this.addListener(this.$verifyButton, 'click', 'onVerify');\n\n            this.slideout.on('close', (ev) => {\n              this.$removeSetupButton = null;\n              this.slideout = null;\n            });\n          })\n          .catch(({response}) => {\n            // Add the error message\n            Craft.cp.displayError(response.data.message);\n          });\n      },\n\n      onClickClose: function (ev) {\n        this.slideout.close();\n      },\n\n      onRemoveSetup: function (ev) {\n        ev.preventDefault();\n\n        let currentMethod = this.getCurrentMfaType(\n          this.slideout.$container.find('#mfa-setup-form')\n        );\n\n        if (currentMethod === undefined) {\n          currentMethod = null;\n        }\n\n        let data = {\n          currentMethod: currentMethod,\n        };\n\n        Craft.sendActionRequest('POST', this.settings.removeSetup, {data})\n          .then((response) => {\n            $(ev.currentTarget).remove();\n            Craft.cp.displayNotice(Craft.t('app', 'MFA setup removed.'));\n          })\n          .catch((e) => {\n            Craft.cp.displayError(e.response.data.message);\n          })\n          .finally(() => {\n            this.slideout.close();\n          });\n      },\n\n      onVerify: function (ev) {\n        ev.preventDefault();\n\n        const $submitBtn = this.slideout.$container.find('#mfa-verify');\n\n        $submitBtn.addClass('loading');\n\n        let data = {\n          mfaFields: {},\n          currentMethod: null,\n        };\n\n        data.mfaFields = this._getMfaFields(this.slideout.$container);\n        data.currentMethod = this._getCurrentMethodInput(\n          this.slideout.$container\n        );\n\n        Craft.sendActionRequest('POST', this.settings.saveSetup, {data})\n          .then((response) => {\n            this.onSubmitResponse($submitBtn);\n            Craft.cp.displayNotice(Craft.t('app', 'MFA settings saved.'));\n            this.slideout.close();\n          })\n          .catch(({response}) => {\n            this.onSubmitResponse($submitBtn);\n\n            // Add the error message\n            this.showError(response.data.message);\n            Craft.cp.displayError(response.data.message);\n          });\n      },\n\n      onSubmitResponse: function ($submitBtn) {\n        $submitBtn.removeClass('loading');\n      },\n\n      showError: function (error) {\n        this.clearErrors();\n\n        $('<p class=\"error\" style=\"display: none;\">' + error + '</p>')\n          .appendTo(this.$errors)\n          .velocity('fadeIn');\n      },\n\n      clearErrors: function () {\n        this.$errors.empty();\n      },\n\n      onAlternativeMfaTypeClick: function (event) {\n        // get current authenticator class via data-mfa-type\n        let currentMethod = this.getCurrentMfaType(\n          this.$mfaLoginFormContainer.find('#verifyContainer')\n        );\n        if (currentMethod === null) {\n          this.$alternativeMfaLink.hide();\n          this.showError(\n            Craft.t('app', 'No alternative MFA methods available.')\n          );\n        }\n\n        let data = {\n          currentMethod: currentMethod,\n        };\n\n        // get available MFA methods, minus the one that's being shown\n        this.getAlternativeMfaTypes(data);\n      },\n\n      getAlternativeMfaTypes: function (data) {\n        Craft.sendActionRequest(\n          'POST',\n          this.settings.fetchAlternativeMfaTypes,\n          {\n            data,\n          }\n        )\n          .then((response) => {\n            if (response.data.alternativeTypes !== undefined) {\n              this.showAlternativeMfaTypes(response.data.alternativeTypes);\n            }\n          })\n          .catch(({response}) => {\n            this.showError(response.data.message);\n          });\n      },\n\n      showAlternativeMfaTypes: function (data) {\n        let alternativeTypes = Object.entries(data).map(([key, value]) => ({\n          key,\n          value,\n        }));\n        if (alternativeTypes.length > 0) {\n          alternativeTypes.forEach((type) => {\n            this.$alternativeMfaTypesContainer.append(\n              '<li><button ' +\n                'class=\"alternative-mfa-type\" ' +\n                'type=\"button\" ' +\n                'value=\"' +\n                type.key +\n                '\">' +\n                type.value.name +\n                '</button></li>'\n            );\n          });\n        }\n\n        // list them by name\n        this.$alternativeMfaLink\n          .hide()\n          .after(this.$alternativeMfaTypesContainer);\n\n        // clicking on a method name swaps the form fields\n        this.addListener(\n          $('.alternative-mfa-type'),\n          'click',\n          'onSelectAlternativeMfaType'\n        );\n      },\n\n      onSelectAlternativeMfaType: function (event) {\n        const data = {\n          selectedMethod: $(event.currentTarget).attr('value'),\n        };\n\n        Craft.sendActionRequest('POST', this.settings.loadAlternativeMfaType, {\n          data,\n        })\n          .then((response) => {\n            if (response.data.mfaForm !== undefined) {\n              this.$mfaLoginFormContainer\n                .html('')\n                .append(response.data.mfaForm);\n              this.$alternativeMfaTypesContainer.html('');\n              this.$alternativeMfaLink.show();\n              this.onSubmitResponse();\n            }\n          })\n          .catch(({response}) => {\n            //this.showError(response.data.message);\n          });\n      },\n\n      _getMfaFields: function ($container) {\n        let mfaFields = {};\n\n        $container\n          .find('input[name^=\"mfaFields[')\n          .each(function (index, element) {\n            let name = $(element).attr('id');\n            mfaFields[name] = $(element).val();\n          });\n\n        return mfaFields;\n      },\n\n      _getCurrentMethodInput: function ($container) {\n        return $container.find('input[name=\"currentMethod\"').val();\n      },\n    },\n    {\n      defaults: {\n        fetchAlternativeMfaTypes: 'mfa/fetch-alternative-mfa-types',\n        loadAlternativeMfaType: 'mfa/load-alternative-mfa-type',\n        setupSlideoutHtml: 'mfa/setup-slideout-html',\n        saveSetup: 'mfa/save-setup',\n        removeSetup: 'mfa/remove-setup',\n      },\n    }\n  );\n})(jQuery);\n"],"names":["$","jQuery","Craft","Mfa","Garnish","Base","extend","$mfaLoginFormContainer","$mfaSetupFormContainer","$alternativeMfaLink","$alternativeMfaTypesContainer","$viewSetupBtns","$errors","$slideout","$removeSetupButton","$closeButton","$verifyButton","init","settings","this","find","setSettings","defaults","addListener","showMfaForm","mfaForm","$loginDiv","html","append","addClass","hide","$submitBtn","onSubmitResponse","getCurrentMfaType","$container","currentMethod","attr","undefined","submitLoginMfa","data","mfaFields","_getMfaFields","_getCurrentMethodInput","sendActionRequest","then","response","window","location","href","returnUrl","showError","message","onViewSetupBtnClick","ev","preventDefault","selectedMethod","currentTarget","setupSlideoutHtml","slideout","Slideout","on","cp","displayError","onClickClose","close","onRemoveSetup","removeSetup","remove","displayNotice","t","e","onVerify","saveSetup","removeClass","error","clearErrors","appendTo","velocity","empty","onAlternativeMfaTypeClick","event","getAlternativeMfaTypes","fetchAlternativeMfaTypes","alternativeTypes","showAlternativeMfaTypes","Object","entries","map","key","value","length","forEach","type","name","after","onSelectAlternativeMfaType","loadAlternativeMfaType","show","each","index","element","val"],"sourceRoot":""}