{"version":3,"file":"mfa.js","mappings":"yBAKA,SAASA,EAAwBC,GAC7B,MAAMC,EAAQ,IAAIC,WAAWF,GAC7B,IAAIG,EAAM,GACV,IAAK,MAAMC,KAAYH,EACnBE,GAAOE,OAAOC,aAAaF,GAG/B,OADqBG,KAAKJ,GACNK,QAAQ,MAAO,KAAKA,QAAQ,MAAO,KAAKA,QAAQ,KAAM,GAC9E,CAEA,SAASC,EAAwBC,GAC7B,MAAMC,EAASD,EAAgBF,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAC1DI,GAAa,EAAKD,EAAOE,OAAS,GAAM,EACxCC,EAASH,EAAOI,OAAOJ,EAAOE,OAASD,EAAW,KAClDI,EAASC,KAAKH,GACdd,EAAS,IAAIkB,YAAYF,EAAOH,QAChCZ,EAAQ,IAAIC,WAAWF,GAC7B,IAAK,IAAImB,EAAI,EAAGA,EAAIH,EAAOH,OAAQM,IAC/BlB,EAAMkB,GAAKH,EAAOI,WAAWD,GAEjC,OAAOnB,CACX,CAEA,SAASqB,IACL,YAAyFC,KAArE,OAAXC,aAA8B,IAAXA,YAAoB,EAASA,OAAOC,sBAA4E,mBAA/BD,OAAOC,mBACxH,CAEA,SAASC,EAAgCC,GACrC,MAAM,GAAEC,GAAOD,EACf,MAAO,IACAA,EACHC,GAAIlB,EAAwBkB,GAC5BC,WAAYF,EAAWE,WAE/B,CAMA,MAAMC,UAAsBC,MACxBC,YAAYC,EAASC,EAAO,iBACxBC,MAAMF,GACNG,KAAKF,KAAOA,CAChB,EA+DJ,MAAMG,EAAuB,IAV7B,MACIC,uBACQF,KAAKG,YACLH,KAAKG,WAAWC,MAAM,qDAE1B,MAAMC,EAAgB,IAAIC,gBAE1B,OADAN,KAAKG,WAAaE,EACXA,EAAcE,MACzB,GAIEC,EAAc,CAAC,iBAAkB,YACvC,SAASC,EAA0BC,GAC/B,GAAKA,KAGDF,EAAYG,QAAQD,GAAc,GAGtC,OAAOA,CACX,C,0GCzHA,IAAWE,IA8URC,OA3UDC,MAAMC,IAAMC,QAAQC,KAAKC,OACvB,CACEC,uBAAwB,KACxBC,uBAAwB,KACxBC,oBAAqB,KACrBC,8BAA+B,KAC/BC,eAAgB,KAChBC,QAAS,KAETC,UAAW,KACXC,mBAAoB,KACpBC,aAAc,KACdC,cAAe,KAEfC,KAAM,SAAUC,GACd9B,KAAKmB,uBAAyBP,EAAE,aAChCZ,KAAKoB,uBAAyBR,EAAE,cAChCZ,KAAKqB,oBAAsBT,EAAE,oBAC7BZ,KAAKsB,8BAAgCV,EAAE,0BACvCZ,KAAKuB,eAAiBvB,KAAKoB,uBAAuBW,KAChD,yBAGF/B,KAAKgC,YAAYF,EAAUhB,MAAMC,IAAIkB,UAErCjC,KAAKkC,YACHlC,KAAKqB,oBACL,QACA,6BAEFrB,KAAKkC,YAAYlC,KAAKuB,eAAgB,QAAS,sBACjD,EAEAY,YAAa,SAAUC,EAASC,GAC9BrC,KAAKmB,uBAAuBmB,KAAK,IAAIC,OAAOH,GAC5CC,EAAUG,SAAS,OACnB5B,EAAE,uBAAuB6B,OACzB,IAAMC,EAAa1C,KAAKmB,uBAAuBY,KAAK,WACpD/B,KAAKwB,QAAUZ,EAAE,iBAEjBZ,KAAK2C,iBAAiBD,EACxB,EAEAE,kBAAmB,SAAUC,GAC3B,IAAIC,EAAgBD,EAAWE,KAAK,iBAMpC,YAJsB5D,IAAlB2D,IACFA,EAAgB,MAGXA,CACT,EAEAE,cAAe,WAAY,WACnBN,EAAa1C,KAAKmB,uBAAuBY,KAAK,WACpDW,EAAWF,SAAS,WAEpB,IAAIS,EAAO,CACTC,UAAW,CAAC,EACZJ,cAAe,MAGjBG,EAAKC,UAAYlD,KAAKmD,cAAcnD,KAAKmB,wBACzC8B,EAAKH,cAAgB9C,KAAKoD,uBACxBpD,KAAKmB,wBAGPL,MAAMuC,kBAAkB,OAAQ,mBAAoB,CAACJ,KAAAA,IAClDK,MAAK,SAACC,GACLnE,OAAOoE,SAASC,KAAOF,EAASN,KAAKS,SACvC,IAAE,OACK,YAAgB,IAAdH,EAAQ,EAARA,SACP,EAAKZ,iBAAiBD,GAGtB,EAAKiB,UAAUJ,EAASN,KAAKpD,QAC/B,GACJ,EAEA+D,oBAAqB,SAAUC,GAAI,WAC3BC,EAAUlD,EAAEiD,EAAGE,eACrBD,EAAQE,UACRH,EAAGI,iBAEH,IAAMhB,EAAO,CACXiB,eAAgBlE,KAAK4C,kBAAkBkB,IAGzChD,MAAMuC,kBAAkB,OAAQrD,KAAK8B,SAASqC,kBAAmB,CAAClB,KAAAA,IAC/DK,MAAK,SAACC,GACL,EAAKa,SAAW,IAAItD,MAAMuD,SAASd,EAASN,KAAKX,MAEjD,EAAKd,QAAU,EAAK4C,SAASvB,WAAWd,KAAK,cAC7C,EAAKJ,aAAe,EAAKyC,SAASvB,WAAWd,KAAK,gBAIxB,+BAAxBkB,EAAKiB,gBACLhF,KAEA,IAAI4B,MAAMwD,cAAc,EAAKF,UAG/B,EAAKxC,cAAgB,EAAKwC,SAASvB,WAAWd,KAAK,eACnD,EAAKL,mBACH,EAAK0C,SAASvB,WAAWd,KAAK,qBAEhC,EAAKG,YAAY,EAAKR,mBAAoB,QAAS,iBACnD,EAAKQ,YAAY,EAAKP,aAAc,QAAS,gBAC7C,EAAKO,YAAY,EAAKN,cAAe,QAAS,YAE9C,EAAKwC,SAASG,GAAG,SAAS,SAACV,GACzB,EAAKnC,mBAAqB,KAC1B,EAAK0C,SAAW,KAChBN,EAAQU,QACV,GACF,IAAE,OACK,YAAgB,IAAdjB,EAAQ,EAARA,SAEPzC,MAAM2D,GAAGC,aAAanB,EAASN,KAAKpD,SACpCiE,EAAQU,QACV,GACJ,EAEAG,aAAc,SAAUd,GACtB7D,KAAKoE,SAASQ,OAChB,EAEAC,cAAe,SAAUhB,GAAI,WAC3BA,EAAGI,iBAEH,IAAInB,EAAgB9C,KAAK4C,kBACvB5C,KAAKoE,SAASvB,WAAWd,KAAK,yBAGV5C,IAAlB2D,IACFA,EAAgB,MAGlB,IAAIG,EAAO,CACTH,cAAeA,GAGCgC,QAChBhE,MAAMiE,EAAE,MAAO,iDAIfjE,MAAMuC,kBAAkB,OAAQrD,KAAK8B,SAASkD,YAAa,CAAC/B,KAAAA,IACzDK,MAAK,SAACC,GACL3C,EAAEiD,EAAGE,eAAekB,SACpBnE,MAAM2D,GAAGS,cAAcpE,MAAMiE,EAAE,MAAO,sBACxC,IAAE,OACK,SAACI,GACNrE,MAAM2D,GAAGC,aAAaS,EAAE5B,SAASN,KAAKpD,QACxC,IAAE,SACO,WACP,EAAKuE,SAASQ,OAChB,GAEN,EAEAQ,SAAU,SAAUvB,GAAI,WACtBA,EAAGI,iBAEH,IAAMvB,EAAa1C,KAAKoE,SAASvB,WAAWd,KAAK,eAEjDW,EAAWF,SAAS,WAEpB,IAAIS,EAAO,CACTC,UAAW,CAAC,EACZJ,cAAe,MAGjBG,EAAKC,UAAYlD,KAAKmD,cAAcnD,KAAKoE,SAASvB,YAClDI,EAAKH,cAAgB9C,KAAKoD,uBACxBpD,KAAKoE,SAASvB,YAGhB/B,MAAMuC,kBAAkB,OAAQrD,KAAK8B,SAASuD,UAAW,CAACpC,KAAAA,IACvDK,MAAK,SAACC,GACL,EAAKZ,iBAAiBD,GACtB5B,MAAM2D,GAAGS,cAAcpE,MAAMiE,EAAE,MAAO,wBACtC,EAAKX,SAASQ,OAChB,IAAE,OACK,YAAgB,IAAdrB,EAAQ,EAARA,SACP,EAAKZ,iBAAiBD,GAGtB,EAAKiB,UAAUJ,EAASN,KAAKpD,SAC7BiB,MAAM2D,GAAGC,aAAanB,EAASN,KAAKpD,QACtC,GACJ,EAEA8C,iBAAkB,SAAUD,GAC1BA,EAAW4C,YAAY,UACzB,EAEA3B,UAAW,SAAU4B,GACnBvF,KAAKwF,cAEL5E,EAAE,2CAA6C2E,EAAQ,QACpDE,SAASzF,KAAKwB,SACdkE,SAAS,SACd,EAEAF,YAAa,WACXxF,KAAKwB,QAAQmE,OACf,EAEAC,0BAA2B,SAAUC,GAEnC,IAAI/C,EAAgB9C,KAAK4C,kBACvB5C,KAAKmB,uBAAuBY,KAAK,qBAEb,OAAlBe,IACF9C,KAAKqB,oBAAoBoB,OACzBzC,KAAK2D,UACH7C,MAAMiE,EAAE,MAAO,2CAInB,IAAI9B,EAAO,CACTH,cAAeA,GAIjB9C,KAAK8F,uBAAuB7C,EAC9B,EAEA6C,uBAAwB,SAAU7C,GAAM,WACtCnC,MAAMuC,kBACJ,OACArD,KAAK8B,SAASiE,yBACd,CACE9C,KAAAA,IAGDK,MAAK,SAACC,QACkCpE,IAAnCoE,EAASN,KAAK+C,kBAChB,EAAKC,wBAAwB1C,EAASN,KAAK+C,iBAE/C,IAAE,OACK,YAAgB,IAAdzC,EAAQ,EAARA,SACP,EAAKI,UAAUJ,EAASN,KAAKpD,QAC/B,GACJ,EAEAoG,wBAAyB,SAAUhD,GAAM,WACnC+C,EAAmBE,OAAOC,QAAQlD,GAAMmD,KAAI,gB,IAAA,G,EAAA,E,4CAAA,I,gxBAAY,MAAO,CACjEC,IADmD,KAEnDC,MAF0D,KAG3D,IACGN,EAAiBtH,OAAS,GAC5BsH,EAAiBO,SAAQ,SAACC,GACxB,EAAKlF,8BAA8BiB,OACjC,iEAIEiE,EAAKH,IACL,KACAG,EAAKF,MAAMxG,KACX,iBAEN,IAIFE,KAAKqB,oBACFoB,OACAgE,MAAMzG,KAAKsB,+BAGdtB,KAAKkC,YACHtB,EAAE,yBACF,QACA,6BAEJ,EAEA8F,2BAA4B,SAAUb,GAAO,WACrC5C,EAAO,CACXiB,eAAgBtD,EAAEiF,EAAM9B,eAAehB,KAAK,UAG9CjC,MAAMuC,kBAAkB,OAAQrD,KAAK8B,SAAS6E,uBAAwB,CACpE1D,KAAAA,IAECK,MAAK,SAACC,QACyBpE,IAA1BoE,EAASN,KAAKb,UAChB,EAAKjB,uBACFmB,KAAK,IACLC,OAAOgB,EAASN,KAAKb,SACxB,EAAKd,8BAA8BgB,KAAK,IACxC,EAAKjB,oBAAoBuF,OACzB,EAAKjE,mBAET,IAAE,OACK,YAAU,EAARY,QAET,GACJ,EAEAJ,cAAe,SAAUN,GACvB,IAAIK,EAAY,CAAC,EASjB,OAPAL,EACGd,KAAK,2BACL8E,MAAK,SAAUC,EAAOC,GACrB,IAAIjH,EAAOc,EAAEmG,GAAShE,KAAK,MAC3BG,EAAUpD,GAAQc,EAAEmG,GAASC,KAC/B,IAEK9D,CACT,EAEAE,uBAAwB,SAAUP,GAChC,OAAOA,EAAWd,KAAK,8BAA8BiF,KACvD,GAEF,CACE/E,SAAU,CACR8D,yBAA0B,kCAC1BY,uBAAwB,gCACxBxC,kBAAmB,0BACnBkB,UAAW,iBACXL,YAAa,sBCzUrB,SAAWpE,GAGTE,MAAMwD,cAAgBtD,QAAQC,KAAKC,OACjC,CACE+F,mBAAoB,KACpBC,iBAAkB,KAClBC,WAAY,KACZ/C,SAAU,KAEVvC,KAAM,SAAUuC,EAAUtC,GACxBsF,QAAQC,IAAI,QACZrH,KAAKoE,SAAWA,EAChBpE,KAAKgC,YAAYF,EAAUhB,MAAMwD,cAAcrC,UAC/CjC,KAAKiH,mBAAqBrG,EAAE,qBAC5BZ,KAAKkH,iBAAmBlH,KAAKoE,SAASvB,WAAWd,KAAK,cACtD/B,KAAKmH,WAAanH,KAAKoE,SAASvB,WAAWd,KACzC,2BAGG7C,MACH4B,MAAM2D,GAAGC,aACP5D,MAAMiE,EAAE,MAAO,2CAEjB/E,KAAKiH,mBAAmBjD,WAG1BhE,KAAKkC,YACHlC,KAAKiH,mBACL,QACA,uBAGsB,OAApBjH,KAAKmH,YACPnH,KAAKkC,YACHlC,KAAKmH,WAAWpF,KAAK,WACrB,QACA,sBAGN,EAEAuF,oBAAqB,SAAUzD,GACxBjD,EAAEiD,EAAGE,eAAewD,SAAS,cAChCvH,KAAKwH,WAAW1G,MAAMiE,EAAE,MAAO,iCAC/BjE,MAAM2G,uBAAuBC,uBAC3B1H,KAAK2H,yBAAyBC,KAAK5H,MACnCA,KAAK6H,gBAAgBD,KAAK5H,OAGhC,EAEA6H,gBAAiB,WACf7H,KAAK8H,aACP,EAEAH,yBAA0B,WAAY,WACpC3H,KAAK8H,cAGLhH,MAAMuC,kBACJ,OACArD,KAAK8B,SAASiG,6BAEbzE,MAAK,SAACC,GACL,IAAMyE,EAAsBzE,EAASN,KAAK+E,oBAC1C,IACE,EAAKR,WAAW1G,MAAMiE,EAAE,MAAO,0BAC/B,IAAMkD,EAAiBnH,MAAMoH,WAC3BC,OACErH,MAAMiE,EAAE,MAAO,+CFoDjCqD,eAAiCC,GAC7B,IAAIC,EA7HoBhC,EA8HxB,IAAKpH,IACD,MAAM,IAAIS,MAAM,6CAWpB,MAAM4I,EAAU,CAAEC,UATA,IACXH,EACHI,UAAWnK,EAAwB+J,EAAoBI,WACvDC,KAAM,IACCL,EAAoBK,KACvBlJ,IAtIgB8G,EAsIO+B,EAAoBK,KAAKlJ,IArIjD,IAAImJ,aAAcC,OAAOtC,KAuI5BuC,mBAAsE,QAAjDP,EAAKD,EAAoBQ,0BAAuC,IAAPP,OAAgB,EAASA,EAAGlC,IAAI9G,KAIlH,IAAIwJ,EADJP,EAAQhI,OAASN,EAAqBC,uBAEtC,IACI4I,QAAoBC,UAAUC,YAAYC,OAAOV,EAIrD,CAFA,MAAOW,GACH,MA9FR,UAAmC,MAAE3D,EAAK,QAAEgD,IACxC,IAAID,EAAIa,EACR,MAAM,UAAEX,GAAcD,EACtB,IAAKC,EACD,MAAM7I,MAAM,mDAEhB,GAAmB,eAAf4F,EAAMzF,MACN,GAAIyI,EAAQhI,UAAW,IAAID,iBAAkBC,OACzC,OAAO,IAAIb,EAAc,iDAAkD,mBAG9E,GAAmB,oBAAf6F,EAAMzF,KAA4B,CACvC,IAA6G,KAA5D,QAA3CwI,EAAKE,EAAUY,8BAA2C,IAAPd,OAAgB,EAASA,EAAGe,oBACjF,OAAO,IAAI3J,EAAc,qFAAsF,mBAE9G,GAA2G,cAA1D,QAA3CyJ,EAAKX,EAAUY,8BAA2C,IAAPD,OAAgB,EAASA,EAAGG,kBACtF,OAAO,IAAI5J,EAAc,6EAA8E,kBAE/G,KACK,IAAmB,sBAAf6F,EAAMzF,KACX,OAAO,IAAIJ,EAAc,8CAA+C,qBAEvE,GAAmB,oBAAf6F,EAAMzF,UACV,IAAmB,sBAAfyF,EAAMzF,KAEX,OAAqC,IADP0I,EAAUe,iBAAiBC,QAAOC,GAAwB,eAAfA,EAAMjD,OACrD9H,OACf,IAAIgB,EAAc,wDAAyD,qBAE/E,IAAIA,EAAc,wFAAyF,qBAEjH,GAAmB,kBAAf6F,EAAMzF,KAA0B,CACrC,MAAM4J,EAAkBtK,OAAOoE,SAASmG,SACxC,GA1CiB,eADFA,EA2CID,KA1Ca,0CAA0CE,KAAKD,GA2C3E,OAAO,IAAIjK,EAAc,GAAGN,OAAOoE,SAASmG,gCAAiC,iBAE5E,GAAInB,EAAUqB,GAAGrK,KAAOkK,EACzB,OAAO,IAAIhK,EAAc,cAAc8I,EAAUqB,GAAGrK,iCAAkC,gBAE9F,MACK,GAAmB,cAAf+F,EAAMzF,MACX,GAAI0I,EAAUE,KAAKlJ,GAAGsK,WAAa,GAAKtB,EAAUE,KAAKlJ,GAAGsK,WAAa,GACnE,OAAO,IAAIpK,EAAc,8CAA+C,kBAG3E,GAAmB,iBAAf6F,EAAMzF,KACX,OAAO,IAAIJ,EAAc,sGAAuG,eACpI,EAzDJ,IAAuBiK,EA0DnB,OAAOpE,CACX,CA8CcwE,CAA0B,CAAExE,MAAO2D,EAAKX,WAClD,CACA,IAAKO,EACD,MAAM,IAAInJ,MAAM,kCAEpB,MAAM,GAAEH,EAAE,MAAEwK,EAAK,SAAEzG,EAAQ,KAAEiD,GAASsC,EACtC,IAAIrJ,EAIJ,MAHsC,mBAA3B8D,EAAS0G,gBAChBxK,EAAa8D,EAAS0G,iBAEnB,CACHzK,KACAwK,MAAOpM,EAAwBoM,GAC/BzG,SAAU,CACN2G,kBAAmBtM,EAAwB2F,EAAS2G,mBACpDC,eAAgBvM,EAAwB2F,EAAS4G,gBACjD1K,cAEJ+G,OACA4D,uBAAwBtB,EAAWuB,4BACnCC,wBAAyB7J,EAA0BqI,EAAWwB,yBAEtE,EE5FcC,CAAkBvC,GACf1E,MAAK,SAACkH,GACL,EAAKC,2BAA2BD,EAAavC,EAC/C,IAAE,OACK,SAACyC,GACN,EAAKlD,WACH1G,MAAMiE,EAAE,MAAO,wBACb,IACA2F,EAAiB7K,QACnB,QAEJ,GAGJ,CAFE,MAAO0F,GACP,EAAKiC,WAAWjC,EAAO,QACzB,CACF,IAAE,OACK,YAAgB,IAAdhC,EAAQ,EAARA,SACP,EAAKiE,WAAWjE,EAASN,KAAKpD,QAAS,QACzC,GACJ,EAEA4K,2BAA4B,SAC1BE,EACA1C,GACA,WACAjI,KAAKwH,WAAW1G,MAAMiE,EAAE,MAAO,0BAC/B,IAAI9B,EAAO,CACT+F,YAAa4B,KAAKC,UAAUF,GAC5B1C,eAAgBA,GAIlBnH,MAAMuC,kBAAkB,OAAQrD,KAAK8B,SAASgJ,mBAAoB,CAChE7H,KAAAA,IAECK,MAAK,SAACC,GACL,EAAKuE,cAEDvE,EAASN,KAAK8H,UAChBjK,MAAM2D,GAAGuG,eACPlK,MAAMiE,EAAE,MAAO,6BAEbxB,EAASN,KAAKX,OAChB,EAAK8B,SAASvB,WAAWP,KAAKiB,EAASN,KAAKX,MAC5C,EAAKT,KAAK,EAAKuC,YAGjB,EAAKoD,WAAW,wBAAyB,QAE7C,IAAE,OACK,YAAgB,IAAdjE,EAAQ,EAARA,SACP,EAAKiE,WAAWjE,EAASN,KAAKpD,QAAS,QACzC,GACJ,EAEAoL,oBAAqB,SAAUpH,GAAI,WACjCA,EAAGI,iBAEH,IAAMiH,EAAOtK,EAAEiD,EAAGE,eAAehB,KAAK,YAChCkF,EAAiBrH,EAAEiD,EAAGE,eACzBoH,QAAQ,MACRpJ,KAAK,gCACLqJ,OAECnI,EAAO,CACToI,IAAKH,GAGDI,EAAYxG,QAChBhE,MAAMiE,EACJ,MACA,mEACA,CAACkD,eAAgBA,UAIR9I,IAAT+L,GAAsBI,GACxBxK,MAAMuC,kBAAkB,OAAQrD,KAAK8B,SAASyJ,kBAAmB,CAC/DtI,KAAAA,IAECK,MAAK,SAACC,GACLzC,MAAM2D,GAAGuG,eAAezH,EAASN,KAAKpD,SAClC0D,EAASN,KAAKX,OAChB,EAAK8B,SAASvB,WAAWP,KAAKiB,EAASN,KAAKX,MAC5C,EAAKT,KAAK,EAAKuC,UAEnB,IAAE,OACK,YAAgB,IAAdb,EAAQ,EAARA,SACP,EAAKiE,WAAWjE,EAASN,KAAKpD,QAAS,QACzC,GAEN,EAEA2H,WAAY,SAAU3H,EAAS2G,GAEjB,SAARA,EACFxG,KAAKkH,iBAAiB1E,SAAS,SAE/BxC,KAAKkH,iBAAiB5B,YAAY,SAEpCtF,KAAKkH,iBAAiBkE,KAAKvL,EAC7B,EAEAiI,YAAa,WACX9H,KAAKkH,iBAAiBkE,KAAK,GAC7B,GAEF,CACEnJ,SAAU,CACR8F,4BAA6B,oCAC7B+C,mBAAoB,0BACpBS,kBAAmB,4BAI1B,CA5LD,CA4LG1K,O","sources":["webpack:///../../../../../node_modules/@simplewebauthn/browser/dist/bundle/index.js","webpack:///./js/mfa.js","webpack:///./js/WebAuthnSetup.js"],"sourcesContent":["/* [@simplewebauthn/browser@7.1.0] */\nfunction utf8StringToBuffer(value) {\n    return new TextEncoder().encode(value);\n}\n\nfunction bufferToBase64URLString(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let str = '';\n    for (const charCode of bytes) {\n        str += String.fromCharCode(charCode);\n    }\n    const base64String = btoa(str);\n    return base64String.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nfunction base64URLStringToBuffer(base64URLString) {\n    const base64 = base64URLString.replace(/-/g, '+').replace(/_/g, '/');\n    const padLength = (4 - (base64.length % 4)) % 4;\n    const padded = base64.padEnd(base64.length + padLength, '=');\n    const binary = atob(padded);\n    const buffer = new ArrayBuffer(binary.length);\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return buffer;\n}\n\nfunction browserSupportsWebAuthn() {\n    return ((window === null || window === void 0 ? void 0 : window.PublicKeyCredential) !== undefined && typeof window.PublicKeyCredential === 'function');\n}\n\nfunction toPublicKeyCredentialDescriptor(descriptor) {\n    const { id } = descriptor;\n    return {\n        ...descriptor,\n        id: base64URLStringToBuffer(id),\n        transports: descriptor.transports,\n    };\n}\n\nfunction isValidDomain(hostname) {\n    return (hostname === 'localhost' || /^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$/i.test(hostname));\n}\n\nclass WebAuthnError extends Error {\n    constructor(message, name = 'WebAuthnError') {\n        super(message);\n        this.name = name;\n    }\n}\n\nfunction identifyRegistrationError({ error, options, }) {\n    var _a, _b;\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal === new AbortController().signal) {\n            return new WebAuthnError('Registration ceremony was sent an abort signal', 'AbortError');\n        }\n    }\n    else if (error.name === 'ConstraintError') {\n        if (((_a = publicKey.authenticatorSelection) === null || _a === void 0 ? void 0 : _a.requireResidentKey) === true) {\n            return new WebAuthnError('Discoverable credentials were required but no available authenticator supported it', 'ConstraintError');\n        }\n        else if (((_b = publicKey.authenticatorSelection) === null || _b === void 0 ? void 0 : _b.userVerification) === 'required') {\n            return new WebAuthnError('User verification was required but no available authenticator supported it', 'ConstraintError');\n        }\n    }\n    else if (error.name === 'InvalidStateError') {\n        return new WebAuthnError('The authenticator was previously registered', 'InvalidStateError');\n    }\n    else if (error.name === 'NotAllowedError') ;\n    else if (error.name === 'NotSupportedError') {\n        const validPubKeyCredParams = publicKey.pubKeyCredParams.filter(param => param.type === 'public-key');\n        if (validPubKeyCredParams.length === 0) {\n            return new WebAuthnError('No entry in pubKeyCredParams was of type \"public-key\"', 'NotSupportedError');\n        }\n        return new WebAuthnError('No available authenticator supported any of the specified pubKeyCredParams algorithms', 'NotSupportedError');\n    }\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError(`${window.location.hostname} is an invalid domain`, 'SecurityError');\n        }\n        else if (publicKey.rp.id !== effectiveDomain) {\n            return new WebAuthnError(`The RP ID \"${publicKey.rp.id}\" is invalid for this domain`, 'SecurityError');\n        }\n    }\n    else if (error.name === 'TypeError') {\n        if (publicKey.user.id.byteLength < 1 || publicKey.user.id.byteLength > 64) {\n            return new WebAuthnError('User ID was not between 1 and 64 characters', 'TypeError');\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        return new WebAuthnError('The authenticator was unable to process the specified options, or could not create a new credential', 'UnknownError');\n    }\n    return error;\n}\n\nclass WebAuthnAbortService {\n    createNewAbortSignal() {\n        if (this.controller) {\n            this.controller.abort('Cancelling existing WebAuthn API call for new one');\n        }\n        const newController = new AbortController();\n        this.controller = newController;\n        return newController.signal;\n    }\n}\nconst webauthnAbortService = new WebAuthnAbortService();\n\nconst attachments = ['cross-platform', 'platform'];\nfunction toAuthenticatorAttachment(attachment) {\n    if (!attachment) {\n        return;\n    }\n    if (attachments.indexOf(attachment) < 0) {\n        return;\n    }\n    return attachment;\n}\n\nasync function startRegistration(creationOptionsJSON) {\n    var _a;\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    const publicKey = {\n        ...creationOptionsJSON,\n        challenge: base64URLStringToBuffer(creationOptionsJSON.challenge),\n        user: {\n            ...creationOptionsJSON.user,\n            id: utf8StringToBuffer(creationOptionsJSON.user.id),\n        },\n        excludeCredentials: (_a = creationOptionsJSON.excludeCredentials) === null || _a === void 0 ? void 0 : _a.map(toPublicKeyCredentialDescriptor),\n    };\n    const options = { publicKey };\n    options.signal = webauthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = (await navigator.credentials.create(options));\n    }\n    catch (err) {\n        throw identifyRegistrationError({ error: err, options });\n    }\n    if (!credential) {\n        throw new Error('Registration was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    let transports = undefined;\n    if (typeof response.getTransports === 'function') {\n        transports = response.getTransports();\n    }\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            attestationObject: bufferToBase64URLString(response.attestationObject),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            transports,\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment),\n    };\n}\n\nfunction bufferToUTF8String(value) {\n    return new TextDecoder('utf-8').decode(value);\n}\n\nasync function browserSupportsWebAuthnAutofill() {\n    const globalPublicKeyCredential = window.PublicKeyCredential;\n    return (globalPublicKeyCredential.isConditionalMediationAvailable !== undefined &&\n        globalPublicKeyCredential.isConditionalMediationAvailable());\n}\n\nfunction identifyAuthenticationError({ error, options, }) {\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal === new AbortController().signal) {\n            return new WebAuthnError('Authentication ceremony was sent an abort signal', 'AbortError');\n        }\n    }\n    else if (error.name === 'NotAllowedError') ;\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError(`${window.location.hostname} is an invalid domain`, 'SecurityError');\n        }\n        else if (publicKey.rpId !== effectiveDomain) {\n            return new WebAuthnError(`The RP ID \"${publicKey.rpId}\" is invalid for this domain`, 'SecurityError');\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        return new WebAuthnError('The authenticator was unable to process the specified options, or could not create a new assertion signature', 'UnknownError');\n    }\n    return error;\n}\n\nasync function startAuthentication(requestOptionsJSON, useBrowserAutofill = false) {\n    var _a, _b;\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    let allowCredentials;\n    if (((_a = requestOptionsJSON.allowCredentials) === null || _a === void 0 ? void 0 : _a.length) !== 0) {\n        allowCredentials = (_b = requestOptionsJSON.allowCredentials) === null || _b === void 0 ? void 0 : _b.map(toPublicKeyCredentialDescriptor);\n    }\n    const publicKey = {\n        ...requestOptionsJSON,\n        challenge: base64URLStringToBuffer(requestOptionsJSON.challenge),\n        allowCredentials,\n    };\n    const options = {};\n    if (useBrowserAutofill) {\n        if (!(await browserSupportsWebAuthnAutofill())) {\n            throw Error('Browser does not support WebAuthn autofill');\n        }\n        const eligibleInputs = document.querySelectorAll(\"input[autocomplete*='webauthn']\");\n        if (eligibleInputs.length < 1) {\n            throw Error('No <input> with `\"webauthn\"` in its `autocomplete` attribute was detected');\n        }\n        options.mediation = 'conditional';\n        publicKey.allowCredentials = [];\n    }\n    options.publicKey = publicKey;\n    options.signal = webauthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = (await navigator.credentials.get(options));\n    }\n    catch (err) {\n        throw identifyAuthenticationError({ error: err, options });\n    }\n    if (!credential) {\n        throw new Error('Authentication was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    let userHandle = undefined;\n    if (response.userHandle) {\n        userHandle = bufferToUTF8String(response.userHandle);\n    }\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            authenticatorData: bufferToBase64URLString(response.authenticatorData),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            signature: bufferToBase64URLString(response.signature),\n            userHandle,\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment),\n    };\n}\n\nasync function platformAuthenticatorIsAvailable() {\n    if (!browserSupportsWebAuthn()) {\n        return false;\n    }\n    return PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n}\n\nexport { browserSupportsWebAuthn, browserSupportsWebAuthnAutofill, platformAuthenticatorIsAvailable, startAuthentication, startRegistration };\n","import {browserSupportsWebAuthn} from '@simplewebauthn/browser';\n\n(function ($) {\n  /** global: Craft */\n  /** global: Garnish */\n  Craft.Mfa = Garnish.Base.extend(\n    {\n      $mfaLoginFormContainer: null,\n      $mfaSetupFormContainer: null,\n      $alternativeMfaLink: null,\n      $alternativeMfaTypesContainer: null,\n      $viewSetupBtns: null,\n      $errors: null,\n\n      $slideout: null,\n      $removeSetupButton: null,\n      $closeButton: null,\n      $verifyButton: null,\n\n      init: function (settings) {\n        this.$mfaLoginFormContainer = $('#mfa-form');\n        this.$mfaSetupFormContainer = $('#mfa-setup');\n        this.$alternativeMfaLink = $('#alternative-mfa');\n        this.$alternativeMfaTypesContainer = $('#alternative-mfa-types');\n        this.$viewSetupBtns = this.$mfaSetupFormContainer.find(\n          'button.mfa-view-setup'\n        );\n\n        this.setSettings(settings, Craft.Mfa.defaults);\n\n        this.addListener(\n          this.$alternativeMfaLink,\n          'click',\n          'onAlternativeMfaTypeClick'\n        );\n        this.addListener(this.$viewSetupBtns, 'click', 'onViewSetupBtnClick');\n      },\n\n      showMfaForm: function (mfaForm, $loginDiv) {\n        this.$mfaLoginFormContainer.html('').append(mfaForm);\n        $loginDiv.addClass('mfa');\n        $('#login-form-buttons').hide();\n        const $submitBtn = this.$mfaLoginFormContainer.find('.submit');\n        this.$errors = $('#login-errors');\n\n        this.onSubmitResponse($submitBtn);\n      },\n\n      getCurrentMfaType: function ($container) {\n        let currentMethod = $container.attr('data-mfa-type');\n\n        if (currentMethod === undefined) {\n          currentMethod = null;\n        }\n\n        return currentMethod;\n      },\n\n      submitMfaCode: function () {\n        const $submitBtn = this.$mfaLoginFormContainer.find('.submit');\n        $submitBtn.addClass('loading');\n\n        let data = {\n          mfaFields: {},\n          currentMethod: null,\n        };\n\n        data.mfaFields = this._getMfaFields(this.$mfaLoginFormContainer);\n        data.currentMethod = this._getCurrentMethodInput(\n          this.$mfaLoginFormContainer\n        );\n\n        Craft.sendActionRequest('POST', 'users/verify-mfa', {data})\n          .then((response) => {\n            window.location.href = response.data.returnUrl;\n          })\n          .catch(({response}) => {\n            this.onSubmitResponse($submitBtn);\n\n            // Add the error message\n            this.showError(response.data.message);\n          });\n      },\n\n      onViewSetupBtnClick: function (ev) {\n        const $button = $(ev.currentTarget);\n        $button.disable();\n        ev.preventDefault();\n\n        const data = {\n          selectedMethod: this.getCurrentMfaType($button),\n        };\n\n        Craft.sendActionRequest('POST', this.settings.setupSlideoutHtml, {data})\n          .then((response) => {\n            this.slideout = new Craft.Slideout(response.data.html);\n\n            this.$errors = this.slideout.$container.find('.so-notice');\n            this.$closeButton = this.slideout.$container.find('button.close');\n\n            // initialise webauthn\n            if (\n              data.selectedMethod === 'craft\\\\mfa\\\\type\\\\WebAuthn' &&\n              browserSupportsWebAuthn()\n            ) {\n              new Craft.WebAuthnSetup(this.slideout);\n            }\n\n            this.$verifyButton = this.slideout.$container.find('#mfa-verify');\n            this.$removeSetupButton =\n              this.slideout.$container.find('#mfa-remove-setup');\n\n            this.addListener(this.$removeSetupButton, 'click', 'onRemoveSetup');\n            this.addListener(this.$closeButton, 'click', 'onClickClose');\n            this.addListener(this.$verifyButton, 'click', 'onVerify');\n\n            this.slideout.on('close', (ev) => {\n              this.$removeSetupButton = null;\n              this.slideout = null;\n              $button.enable();\n            });\n          })\n          .catch(({response}) => {\n            // Add the error message\n            Craft.cp.displayError(response.data.message);\n            $button.enable();\n          });\n      },\n\n      onClickClose: function (ev) {\n        this.slideout.close();\n      },\n\n      onRemoveSetup: function (ev) {\n        ev.preventDefault();\n\n        let currentMethod = this.getCurrentMfaType(\n          this.slideout.$container.find('#mfa-setup-form')\n        );\n\n        if (currentMethod === undefined) {\n          currentMethod = null;\n        }\n\n        let data = {\n          currentMethod: currentMethod,\n        };\n\n        const confirmed = confirm(\n          Craft.t('app', 'Are you sure you want to delete this setup?')\n        );\n\n        if (confirmed) {\n          Craft.sendActionRequest('POST', this.settings.removeSetup, {data})\n            .then((response) => {\n              $(ev.currentTarget).remove();\n              Craft.cp.displayNotice(Craft.t('app', 'MFA setup removed.'));\n            })\n            .catch((e) => {\n              Craft.cp.displayError(e.response.data.message);\n            })\n            .finally(() => {\n              this.slideout.close();\n            });\n        }\n      },\n\n      onVerify: function (ev) {\n        ev.preventDefault();\n\n        const $submitBtn = this.slideout.$container.find('#mfa-verify');\n\n        $submitBtn.addClass('loading');\n\n        let data = {\n          mfaFields: {},\n          currentMethod: null,\n        };\n\n        data.mfaFields = this._getMfaFields(this.slideout.$container);\n        data.currentMethod = this._getCurrentMethodInput(\n          this.slideout.$container\n        );\n\n        Craft.sendActionRequest('POST', this.settings.saveSetup, {data})\n          .then((response) => {\n            this.onSubmitResponse($submitBtn);\n            Craft.cp.displayNotice(Craft.t('app', 'MFA settings saved.'));\n            this.slideout.close();\n          })\n          .catch(({response}) => {\n            this.onSubmitResponse($submitBtn);\n\n            // Add the error message\n            this.showError(response.data.message);\n            Craft.cp.displayError(response.data.message);\n          });\n      },\n\n      onSubmitResponse: function ($submitBtn) {\n        $submitBtn.removeClass('loading');\n      },\n\n      showError: function (error) {\n        this.clearErrors();\n\n        $('<p class=\"error\" style=\"display: none;\">' + error + '</p>')\n          .appendTo(this.$errors)\n          .velocity('fadeIn');\n      },\n\n      clearErrors: function () {\n        this.$errors.empty();\n      },\n\n      onAlternativeMfaTypeClick: function (event) {\n        // get current authenticator class via data-mfa-type\n        let currentMethod = this.getCurrentMfaType(\n          this.$mfaLoginFormContainer.find('#verifyContainer')\n        );\n        if (currentMethod === null) {\n          this.$alternativeMfaLink.hide();\n          this.showError(\n            Craft.t('app', 'No alternative MFA methods available.')\n          );\n        }\n\n        let data = {\n          currentMethod: currentMethod,\n        };\n\n        // get available MFA methods, minus the one that's being shown\n        this.getAlternativeMfaTypes(data);\n      },\n\n      getAlternativeMfaTypes: function (data) {\n        Craft.sendActionRequest(\n          'POST',\n          this.settings.fetchAlternativeMfaTypes,\n          {\n            data,\n          }\n        )\n          .then((response) => {\n            if (response.data.alternativeTypes !== undefined) {\n              this.showAlternativeMfaTypes(response.data.alternativeTypes);\n            }\n          })\n          .catch(({response}) => {\n            this.showError(response.data.message);\n          });\n      },\n\n      showAlternativeMfaTypes: function (data) {\n        let alternativeTypes = Object.entries(data).map(([key, value]) => ({\n          key,\n          value,\n        }));\n        if (alternativeTypes.length > 0) {\n          alternativeTypes.forEach((type) => {\n            this.$alternativeMfaTypesContainer.append(\n              '<li><button ' +\n                'class=\"alternative-mfa-type\" ' +\n                'type=\"button\" ' +\n                'value=\"' +\n                type.key +\n                '\">' +\n                type.value.name +\n                '</button></li>'\n            );\n          });\n        }\n\n        // list them by name\n        this.$alternativeMfaLink\n          .hide()\n          .after(this.$alternativeMfaTypesContainer);\n\n        // clicking on a method name swaps the form fields\n        this.addListener(\n          $('.alternative-mfa-type'),\n          'click',\n          'onSelectAlternativeMfaType'\n        );\n      },\n\n      onSelectAlternativeMfaType: function (event) {\n        const data = {\n          selectedMethod: $(event.currentTarget).attr('value'),\n        };\n\n        Craft.sendActionRequest('POST', this.settings.loadAlternativeMfaType, {\n          data,\n        })\n          .then((response) => {\n            if (response.data.mfaForm !== undefined) {\n              this.$mfaLoginFormContainer\n                .html('')\n                .append(response.data.mfaForm);\n              this.$alternativeMfaTypesContainer.html('');\n              this.$alternativeMfaLink.show();\n              this.onSubmitResponse();\n            }\n          })\n          .catch(({response}) => {\n            //this.showError(response.data.message);\n          });\n      },\n\n      _getMfaFields: function ($container) {\n        let mfaFields = {};\n\n        $container\n          .find('input[name^=\"mfaFields[')\n          .each(function (index, element) {\n            let name = $(element).attr('id');\n            mfaFields[name] = $(element).val();\n          });\n\n        return mfaFields;\n      },\n\n      _getCurrentMethodInput: function ($container) {\n        return $container.find('input[name=\"currentMethod\"').val();\n      },\n    },\n    {\n      defaults: {\n        fetchAlternativeMfaTypes: 'mfa/fetch-alternative-mfa-types',\n        loadAlternativeMfaType: 'mfa/load-alternative-mfa-type',\n        setupSlideoutHtml: 'mfa/setup-slideout-html',\n        saveSetup: 'mfa/save-setup',\n        removeSetup: 'mfa/remove-setup',\n      },\n    }\n  );\n})(jQuery);\n","import {browserSupportsWebAuthn} from '@simplewebauthn/browser';\nimport {startRegistration} from '@simplewebauthn/browser';\n\n(function ($) {\n  /** global: Craft */\n  /** global: Garnish */\n  Craft.WebAuthnSetup = Garnish.Base.extend(\n    {\n      $addSecurityKeyBtn: null,\n      $noticeContainer: null,\n      $keysTable: null,\n      slideout: null,\n\n      init: function (slideout, settings) {\n        console.log('init');\n        this.slideout = slideout;\n        this.setSettings(settings, Craft.WebAuthnSetup.defaults);\n        this.$addSecurityKeyBtn = $('#add-security-key');\n        this.$noticeContainer = this.slideout.$container.find('.so-notice');\n        this.$keysTable = this.slideout.$container.find(\n          '#webauthn-security-keys'\n        );\n\n        if (!browserSupportsWebAuthn()) {\n          Craft.cp.displayError(\n            Craft.t('app', 'This browser does not support WebAuth.')\n          );\n          this.$addSecurityKeyBtn.disable();\n        }\n\n        this.addListener(\n          this.$addSecurityKeyBtn,\n          'click',\n          'onAddSecurityKeyBtn'\n        );\n\n        if (this.$keysTable !== null) {\n          this.addListener(\n            this.$keysTable.find('.delete'),\n            'click',\n            'onDeleteSecurityKey'\n          );\n        }\n      },\n\n      onAddSecurityKeyBtn: function (ev) {\n        if (!$(ev.currentTarget).hasClass('disabled')) {\n          this.showStatus(Craft.t('app', 'Waiting for elevated session'));\n          Craft.elevatedSessionManager.requireElevatedSession(\n            this.startWebAuthRegistration.bind(this),\n            this.failedElevation.bind(this)\n          );\n        }\n      },\n\n      failedElevation: function () {\n        this.clearStatus();\n      },\n\n      startWebAuthRegistration: function () {\n        this.clearStatus();\n\n        // GET registration options from the endpoint that calls\n        Craft.sendActionRequest(\n          'POST',\n          this.settings.generateRegistrationOptions\n        )\n          .then((response) => {\n            const registrationOptions = response.data.registrationOptions;\n            try {\n              this.showStatus(Craft.t('app', 'Starting registration'));\n              const credentialName = Craft.escapeHtml(\n                prompt(\n                  Craft.t('app', 'Please enter a name for the security key')\n                )\n              );\n              startRegistration(registrationOptions)\n                .then((regResponse) => {\n                  this.verifyWebAuthnRegistration(regResponse, credentialName);\n                })\n                .catch((regResponseError) => {\n                  this.showStatus(\n                    Craft.t('app', 'Registration failed:') +\n                      ' ' +\n                      regResponseError.message,\n                    'error'\n                  );\n                });\n            } catch (error) {\n              this.showStatus(error, 'error');\n            }\n          })\n          .catch(({response}) => {\n            this.showStatus(response.data.message, 'error');\n          });\n      },\n\n      verifyWebAuthnRegistration: function (\n        startRegistrationResponse,\n        credentialName\n      ) {\n        this.showStatus(Craft.t('app', 'Starting verification'));\n        let data = {\n          credentials: JSON.stringify(startRegistrationResponse),\n          credentialName: credentialName,\n        };\n\n        // POST the response to the endpoint\n        Craft.sendActionRequest('POST', this.settings.verifyRegistration, {\n          data,\n        })\n          .then((response) => {\n            this.clearStatus();\n            // Show UI appropriate for the `verified` status\n            if (response.data.verified) {\n              Craft.cp.displaySuccess(\n                Craft.t('app', 'Security key registered.')\n              );\n              if (response.data.html) {\n                this.slideout.$container.html(response.data.html);\n                this.init(this.slideout); //reinitialise\n              }\n            } else {\n              this.showStatus('Something went wrong!', 'error');\n            }\n          })\n          .catch(({response}) => {\n            this.showStatus(response.data.message, 'error');\n          });\n      },\n\n      onDeleteSecurityKey: function (ev) {\n        ev.preventDefault();\n\n        const $uid = $(ev.currentTarget).attr('data-uid');\n        const credentialName = $(ev.currentTarget)\n          .parents('tr')\n          .find('[data-name=\"credentialName\"]')\n          .text();\n\n        let data = {\n          uid: $uid,\n        };\n\n        const confirmed = confirm(\n          Craft.t(\n            'app',\n            'Are you sure you want to delete ‘{credentialName}‘ security key?',\n            {credentialName: credentialName}\n          )\n        );\n\n        if ($uid !== undefined && confirmed) {\n          Craft.sendActionRequest('POST', this.settings.deleteSecurityKey, {\n            data,\n          })\n            .then((response) => {\n              Craft.cp.displaySuccess(response.data.message);\n              if (response.data.html) {\n                this.slideout.$container.html(response.data.html);\n                this.init(this.slideout); //reinitialise\n              }\n            })\n            .catch(({response}) => {\n              this.showStatus(response.data.message, 'error');\n            });\n        }\n      },\n\n      showStatus: function (message, type) {\n        //Craft.cp.displayError(message);\n        if (type == 'error') {\n          this.$noticeContainer.addClass('error');\n        } else {\n          this.$noticeContainer.removeClass('error');\n        }\n        this.$noticeContainer.text(message);\n      },\n\n      clearStatus: function () {\n        this.$noticeContainer.text('');\n      },\n    },\n    {\n      defaults: {\n        generateRegistrationOptions: 'mfa/generate-registration-options',\n        verifyRegistration: 'mfa/verify-registration',\n        deleteSecurityKey: 'mfa/delete-security-key',\n      },\n    }\n  );\n})(jQuery);\n"],"names":["bufferToBase64URLString","buffer","bytes","Uint8Array","str","charCode","String","fromCharCode","btoa","replace","base64URLStringToBuffer","base64URLString","base64","padLength","length","padded","padEnd","binary","atob","ArrayBuffer","i","charCodeAt","browserSupportsWebAuthn","undefined","window","PublicKeyCredential","toPublicKeyCredentialDescriptor","descriptor","id","transports","WebAuthnError","Error","constructor","message","name","super","this","webauthnAbortService","createNewAbortSignal","controller","abort","newController","AbortController","signal","attachments","toAuthenticatorAttachment","attachment","indexOf","$","jQuery","Craft","Mfa","Garnish","Base","extend","$mfaLoginFormContainer","$mfaSetupFormContainer","$alternativeMfaLink","$alternativeMfaTypesContainer","$viewSetupBtns","$errors","$slideout","$removeSetupButton","$closeButton","$verifyButton","init","settings","find","setSettings","defaults","addListener","showMfaForm","mfaForm","$loginDiv","html","append","addClass","hide","$submitBtn","onSubmitResponse","getCurrentMfaType","$container","currentMethod","attr","submitMfaCode","data","mfaFields","_getMfaFields","_getCurrentMethodInput","sendActionRequest","then","response","location","href","returnUrl","showError","onViewSetupBtnClick","ev","$button","currentTarget","disable","preventDefault","selectedMethod","setupSlideoutHtml","slideout","Slideout","WebAuthnSetup","on","enable","cp","displayError","onClickClose","close","onRemoveSetup","confirm","t","removeSetup","remove","displayNotice","e","onVerify","saveSetup","removeClass","error","clearErrors","appendTo","velocity","empty","onAlternativeMfaTypeClick","event","getAlternativeMfaTypes","fetchAlternativeMfaTypes","alternativeTypes","showAlternativeMfaTypes","Object","entries","map","key","value","forEach","type","after","onSelectAlternativeMfaType","loadAlternativeMfaType","show","each","index","element","val","$addSecurityKeyBtn","$noticeContainer","$keysTable","console","log","onAddSecurityKeyBtn","hasClass","showStatus","elevatedSessionManager","requireElevatedSession","startWebAuthRegistration","bind","failedElevation","clearStatus","generateRegistrationOptions","registrationOptions","credentialName","escapeHtml","prompt","async","creationOptionsJSON","_a","options","publicKey","challenge","user","TextEncoder","encode","excludeCredentials","credential","navigator","credentials","create","err","_b","authenticatorSelection","requireResidentKey","userVerification","pubKeyCredParams","filter","param","effectiveDomain","hostname","test","rp","byteLength","identifyRegistrationError","rawId","getTransports","attestationObject","clientDataJSON","clientExtensionResults","getClientExtensionResults","authenticatorAttachment","startRegistration","regResponse","verifyWebAuthnRegistration","regResponseError","startRegistrationResponse","JSON","stringify","verifyRegistration","verified","displaySuccess","onDeleteSecurityKey","$uid","parents","text","uid","confirmed","deleteSecurityKey"],"sourceRoot":""}