{"version":3,"file":"mfa.js","mappings":"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","sources":["webpack:///./mfa.js"],"sourcesContent":["(function ($) {\n  /** global: Craft */\n  /** global: Garnish */\n  Craft.Mfa = Garnish.Base.extend(\n    {\n      $mfaLoginFormContainer: null,\n      $mfaSetupFormContainer: null,\n      $alternativeMfaLink: null,\n      $alternativeMfaTypesContainer: null,\n      $viewSetupBtns: null,\n      $errors: null,\n\n      $slideout: null,\n      $removeSetupButton: null,\n      $closeButton: null,\n      $verifyButton: null,\n\n      init: function (settings) {\n        this.$mfaLoginFormContainer = $('#mfa-form');\n        this.$mfaSetupFormContainer = $('#mfa-setup');\n        this.$alternativeMfaLink = $('#alternative-mfa');\n        this.$alternativeMfaTypesContainer = $('#alternative-mfa-types');\n        this.$viewSetupBtns = this.$mfaSetupFormContainer.find(\n          'button.mfa-view-setup'\n        );\n\n        this.setSettings(settings, Craft.Mfa.defaults);\n\n        this.addListener(\n          this.$alternativeMfaLink,\n          'click',\n          'onAlternativeMfaType'\n        );\n        this.addListener(this.$viewSetupBtns, 'click', 'onViewSetupBtnClick');\n      },\n\n      showMfaForm: function (mfaForm, $loginDiv) {\n        this.$mfaLoginFormContainer.html('').append(mfaForm);\n        $loginDiv.addClass('mfa');\n        $('#login-form-buttons').hide();\n        const $submitBtn = this.$mfaLoginFormContainer.find('.submit');\n\n        this.onSubmitResponse($submitBtn);\n      },\n\n      getCurrentMfaType: function ($container) {\n        let currentMethod = $container.attr('data-mfa-type');\n\n        if (currentMethod === undefined) {\n          currentMethod = null;\n        }\n\n        return currentMethod;\n      },\n\n      submitLoginMfa: function () {\n        const $submitBtn = this.$mfaLoginFormContainer.find('.submit');\n        $submitBtn.addClass('loading');\n\n        let data = {\n          mfaFields: {},\n        };\n\n        this.$mfaLoginFormContainer\n          .find('input')\n          .each(function (index, element) {\n            data.mfaFields[$(element).attr('name')] = $(element).val();\n          });\n\n        data.currentMethod = this.getCurrentMfaType(\n          this.$mfaLoginFormContainer.find('#verifyContainer')\n        );\n\n        Craft.sendActionRequest('POST', 'users/verify-mfa', {data})\n          .then((response) => {\n            window.location.href = response.data.returnUrl;\n          })\n          .catch(({response}) => {\n            this.onSubmitResponse($submitBtn);\n\n            // Add the error message\n            this.showError(response.data.message);\n          });\n      },\n\n      onViewSetupBtnClick: function (ev) {\n        ev.preventDefault();\n\n        const data = {\n          selectedMethod: this.getCurrentMfaType($(ev.currentTarget)),\n        };\n\n        Craft.sendActionRequest('POST', 'mfa/setup-slideout-html', {data})\n          .then((response) => {\n            this.slideout = new Craft.Slideout(response.data.html);\n\n            this.$errors = this.slideout.$container.find('.so-notice');\n            this.$closeButton = this.slideout.$container.find('button.close');\n            this.$verifyButton = this.slideout.$container.find('#mfa-verify');\n            this.$removeSetupButton =\n              this.slideout.$container.find('#mfa-remove-setup');\n\n            this.addListener(this.$removeSetupButton, 'click', 'onRemoveSetup');\n            this.addListener(this.$closeButton, 'click', 'onClickClose');\n            this.addListener(this.$verifyButton, 'click', 'onVerify');\n\n            this.slideout.on('close', (ev) => {\n              this.$removeSetupButton = null;\n              this.slideout = null;\n            });\n          })\n          .catch(({response}) => {\n            // Add the error message\n            Craft.cp.displayError(response.data.message);\n          });\n      },\n\n      onClickClose: function (ev) {\n        this.slideout.close();\n      },\n\n      onRemoveSetup: function (ev) {\n        ev.preventDefault();\n\n        let currentMethod = this.getCurrentMfaType(\n          this.slideout.$container.find('#mfa-setup-form')\n        );\n\n        if (currentMethod === undefined) {\n          currentMethod = null;\n        }\n\n        let data = {\n          currentMethod: currentMethod,\n        };\n\n        Craft.sendActionRequest('POST', this.settings.removeSetup, {data})\n          .then((response) => {\n            $(ev.currentTarget).remove();\n            Craft.cp.displayNotice(Craft.t('app', 'MFA setup removed.'));\n          })\n          .catch((e) => {\n            Craft.cp.displayError(e.response.data.message);\n          })\n          .finally(() => {\n            this.slideout.close();\n          });\n      },\n\n      onVerify: function (ev) {\n        ev.preventDefault();\n\n        const $submitBtn = this.slideout.$container.find('#mfa-verify');\n\n        $submitBtn.addClass('loading');\n\n        let data = {\n          mfaFields: {},\n        };\n\n        this.slideout.$container.find('input').each(function (index, element) {\n          data.mfaFields[$(element).attr('name')] = $(element).val();\n        });\n\n        data.currentMethod = this.getCurrentMfaType(\n          this.slideout.$container.find('#mfa-setup-form')\n        );\n\n        Craft.sendActionRequest('POST', 'mfa/save-setup', {data})\n          .then((response) => {\n            this.onSubmitResponse($submitBtn);\n            Craft.cp.displayNotice(Craft.t('app', 'MFA settings saved.'));\n            this.slideout.close();\n          })\n          .catch(({response}) => {\n            this.onSubmitResponse($submitBtn);\n\n            // Add the error message\n            this.showError(response.data.message);\n            Craft.cp.displayError(response.data.message);\n          });\n      },\n\n      onSubmitResponse: function ($submitBtn) {\n        $submitBtn.removeClass('loading');\n      },\n\n      showError: function (error) {\n        this.clearErrors();\n\n        $('<p class=\"error\" style=\"display: none;\">' + error + '</p>')\n          .appendTo(this.$errors)\n          .velocity('fadeIn');\n      },\n\n      clearErrors: function () {\n        this.$errors.empty();\n      },\n\n      onAlternativeMfaType: function (event) {\n        // get current authenticator class via data-mfa-type\n        let currentMethod = this.getCurrentMfaType(\n          this.$mfaLoginFormContainer.find('#verifyContainer')\n        );\n        if (currentMethod === null) {\n          this.$alternativeMfaLink.hide();\n          this.showError(\n            Craft.t('app', 'No alternative MFA methods available.')\n          );\n        }\n\n        let data = {\n          currentMethod: currentMethod,\n        };\n\n        // get available MFA methods, minus the one that's being shown\n        this.getAlternativeMfaTypes(data);\n      },\n\n      getAlternativeMfaTypes: function (data) {\n        Craft.sendActionRequest('POST', 'mfa/get-alternative-mfa-types', {\n          data,\n        })\n          .then((response) => {\n            if (response.data.alternativeTypes !== undefined) {\n              this.showAlternativeMfaTypes(response.data.alternativeTypes);\n            }\n          })\n          .catch(({response}) => {\n            this.showError(response.data.message);\n          });\n      },\n\n      showAlternativeMfaTypes: function (data) {\n        let alternativeTypes = Object.entries(data).map(([key, value]) => ({\n          key,\n          value,\n        }));\n        if (alternativeTypes.length > 0) {\n          alternativeTypes.forEach((type) => {\n            this.$alternativeMfaTypesContainer.append(\n              '<li><button ' +\n                'class=\"alternative-mfa-type\" ' +\n                'type=\"button\" ' +\n                'value=\"' +\n                type.key +\n                '\">' +\n                type.value.name +\n                '</button></li>'\n            );\n          });\n        }\n\n        // list them by name\n        this.$alternativeMfaLink\n          .hide()\n          .after(this.$alternativeMfaTypesContainer);\n\n        // clicking on a method name swaps the form fields\n        this.addListener(\n          $('.alternative-mfa-type'),\n          'click',\n          'onSelectAlternativeMfaType'\n        );\n      },\n\n      onSelectAlternativeMfaType: function (event) {\n        const data = {\n          selectedMethod: $(event.currentTarget).attr('value'),\n        };\n\n        Craft.sendActionRequest('POST', 'mfa/load-alternative-mfa-type', {\n          data,\n        })\n          .then((response) => {\n            if (response.data.mfaForm !== undefined) {\n              this.$mfaLoginFormContainer\n                .html('')\n                .append(response.data.mfaForm);\n              this.$alternativeMfaTypesContainer.html('');\n              this.$alternativeMfaLink.show();\n              this.onSubmitResponse();\n            }\n          })\n          .catch(({response}) => {\n            // console.log(response);\n            // this.showError(response.data.message);\n          });\n      },\n    },\n    {\n      defaults: {\n        removeSetup: 'mfa/remove-setup',\n      },\n    }\n  );\n})(jQuery);\n"],"names":["$","jQuery","Craft","Mfa","Garnish","Base","extend","$mfaLoginFormContainer","$mfaSetupFormContainer","$alternativeMfaLink","$alternativeMfaTypesContainer","$viewSetupBtns","$errors","$slideout","$removeSetupButton","$closeButton","$verifyButton","init","settings","this","find","setSettings","defaults","addListener","showMfaForm","mfaForm","$loginDiv","html","append","addClass","hide","$submitBtn","onSubmitResponse","getCurrentMfaType","$container","currentMethod","attr","undefined","submitLoginMfa","data","mfaFields","each","index","element","val","sendActionRequest","then","response","window","location","href","returnUrl","showError","message","onViewSetupBtnClick","ev","preventDefault","selectedMethod","currentTarget","slideout","Slideout","on","cp","displayError","onClickClose","close","onRemoveSetup","removeSetup","remove","displayNotice","t","e","onVerify","removeClass","error","clearErrors","appendTo","velocity","empty","onAlternativeMfaType","event","getAlternativeMfaTypes","alternativeTypes","showAlternativeMfaTypes","Object","entries","map","key","value","length","forEach","type","name","after","onSelectAlternativeMfaType","show"],"sourceRoot":""}