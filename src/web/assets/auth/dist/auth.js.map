{"version":3,"file":"auth.js","mappings":"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","sources":["webpack:///../../../../../node_modules/@simplewebauthn/browser/dist/bundle/index.js","webpack:///./js/Auth2fa.js","webpack:///./js/Auth2faLogin.js","webpack:///./js/WebAuthnSetup.js"],"sourcesContent":["/* [@simplewebauthn/browser@7.1.0] */\nfunction utf8StringToBuffer(value) {\n    return new TextEncoder().encode(value);\n}\n\nfunction bufferToBase64URLString(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let str = '';\n    for (const charCode of bytes) {\n        str += String.fromCharCode(charCode);\n    }\n    const base64String = btoa(str);\n    return base64String.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nfunction base64URLStringToBuffer(base64URLString) {\n    const base64 = base64URLString.replace(/-/g, '+').replace(/_/g, '/');\n    const padLength = (4 - (base64.length % 4)) % 4;\n    const padded = base64.padEnd(base64.length + padLength, '=');\n    const binary = atob(padded);\n    const buffer = new ArrayBuffer(binary.length);\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return buffer;\n}\n\nfunction browserSupportsWebAuthn() {\n    return ((window === null || window === void 0 ? void 0 : window.PublicKeyCredential) !== undefined && typeof window.PublicKeyCredential === 'function');\n}\n\nfunction toPublicKeyCredentialDescriptor(descriptor) {\n    const { id } = descriptor;\n    return {\n        ...descriptor,\n        id: base64URLStringToBuffer(id),\n        transports: descriptor.transports,\n    };\n}\n\nfunction isValidDomain(hostname) {\n    return (hostname === 'localhost' || /^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$/i.test(hostname));\n}\n\nclass WebAuthnError extends Error {\n    constructor(message, name = 'WebAuthnError') {\n        super(message);\n        this.name = name;\n    }\n}\n\nfunction identifyRegistrationError({ error, options, }) {\n    var _a, _b;\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal === new AbortController().signal) {\n            return new WebAuthnError('Registration ceremony was sent an abort signal', 'AbortError');\n        }\n    }\n    else if (error.name === 'ConstraintError') {\n        if (((_a = publicKey.authenticatorSelection) === null || _a === void 0 ? void 0 : _a.requireResidentKey) === true) {\n            return new WebAuthnError('Discoverable credentials were required but no available authenticator supported it', 'ConstraintError');\n        }\n        else if (((_b = publicKey.authenticatorSelection) === null || _b === void 0 ? void 0 : _b.userVerification) === 'required') {\n            return new WebAuthnError('User verification was required but no available authenticator supported it', 'ConstraintError');\n        }\n    }\n    else if (error.name === 'InvalidStateError') {\n        return new WebAuthnError('The authenticator was previously registered', 'InvalidStateError');\n    }\n    else if (error.name === 'NotAllowedError') ;\n    else if (error.name === 'NotSupportedError') {\n        const validPubKeyCredParams = publicKey.pubKeyCredParams.filter(param => param.type === 'public-key');\n        if (validPubKeyCredParams.length === 0) {\n            return new WebAuthnError('No entry in pubKeyCredParams was of type \"public-key\"', 'NotSupportedError');\n        }\n        return new WebAuthnError('No available authenticator supported any of the specified pubKeyCredParams algorithms', 'NotSupportedError');\n    }\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError(`${window.location.hostname} is an invalid domain`, 'SecurityError');\n        }\n        else if (publicKey.rp.id !== effectiveDomain) {\n            return new WebAuthnError(`The RP ID \"${publicKey.rp.id}\" is invalid for this domain`, 'SecurityError');\n        }\n    }\n    else if (error.name === 'TypeError') {\n        if (publicKey.user.id.byteLength < 1 || publicKey.user.id.byteLength > 64) {\n            return new WebAuthnError('User ID was not between 1 and 64 characters', 'TypeError');\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        return new WebAuthnError('The authenticator was unable to process the specified options, or could not create a new credential', 'UnknownError');\n    }\n    return error;\n}\n\nclass WebAuthnAbortService {\n    createNewAbortSignal() {\n        if (this.controller) {\n            this.controller.abort('Cancelling existing WebAuthn API call for new one');\n        }\n        const newController = new AbortController();\n        this.controller = newController;\n        return newController.signal;\n    }\n}\nconst webauthnAbortService = new WebAuthnAbortService();\n\nconst attachments = ['cross-platform', 'platform'];\nfunction toAuthenticatorAttachment(attachment) {\n    if (!attachment) {\n        return;\n    }\n    if (attachments.indexOf(attachment) < 0) {\n        return;\n    }\n    return attachment;\n}\n\nasync function startRegistration(creationOptionsJSON) {\n    var _a;\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    const publicKey = {\n        ...creationOptionsJSON,\n        challenge: base64URLStringToBuffer(creationOptionsJSON.challenge),\n        user: {\n            ...creationOptionsJSON.user,\n            id: utf8StringToBuffer(creationOptionsJSON.user.id),\n        },\n        excludeCredentials: (_a = creationOptionsJSON.excludeCredentials) === null || _a === void 0 ? void 0 : _a.map(toPublicKeyCredentialDescriptor),\n    };\n    const options = { publicKey };\n    options.signal = webauthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = (await navigator.credentials.create(options));\n    }\n    catch (err) {\n        throw identifyRegistrationError({ error: err, options });\n    }\n    if (!credential) {\n        throw new Error('Registration was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    let transports = undefined;\n    if (typeof response.getTransports === 'function') {\n        transports = response.getTransports();\n    }\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            attestationObject: bufferToBase64URLString(response.attestationObject),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            transports,\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment),\n    };\n}\n\nfunction bufferToUTF8String(value) {\n    return new TextDecoder('utf-8').decode(value);\n}\n\nasync function browserSupportsWebAuthnAutofill() {\n    const globalPublicKeyCredential = window.PublicKeyCredential;\n    return (globalPublicKeyCredential.isConditionalMediationAvailable !== undefined &&\n        globalPublicKeyCredential.isConditionalMediationAvailable());\n}\n\nfunction identifyAuthenticationError({ error, options, }) {\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal === new AbortController().signal) {\n            return new WebAuthnError('Authentication ceremony was sent an abort signal', 'AbortError');\n        }\n    }\n    else if (error.name === 'NotAllowedError') ;\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError(`${window.location.hostname} is an invalid domain`, 'SecurityError');\n        }\n        else if (publicKey.rpId !== effectiveDomain) {\n            return new WebAuthnError(`The RP ID \"${publicKey.rpId}\" is invalid for this domain`, 'SecurityError');\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        return new WebAuthnError('The authenticator was unable to process the specified options, or could not create a new assertion signature', 'UnknownError');\n    }\n    return error;\n}\n\nasync function startAuthentication(requestOptionsJSON, useBrowserAutofill = false) {\n    var _a, _b;\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    let allowCredentials;\n    if (((_a = requestOptionsJSON.allowCredentials) === null || _a === void 0 ? void 0 : _a.length) !== 0) {\n        allowCredentials = (_b = requestOptionsJSON.allowCredentials) === null || _b === void 0 ? void 0 : _b.map(toPublicKeyCredentialDescriptor);\n    }\n    const publicKey = {\n        ...requestOptionsJSON,\n        challenge: base64URLStringToBuffer(requestOptionsJSON.challenge),\n        allowCredentials,\n    };\n    const options = {};\n    if (useBrowserAutofill) {\n        if (!(await browserSupportsWebAuthnAutofill())) {\n            throw Error('Browser does not support WebAuthn autofill');\n        }\n        const eligibleInputs = document.querySelectorAll(\"input[autocomplete*='webauthn']\");\n        if (eligibleInputs.length < 1) {\n            throw Error('No <input> with `\"webauthn\"` in its `autocomplete` attribute was detected');\n        }\n        options.mediation = 'conditional';\n        publicKey.allowCredentials = [];\n    }\n    options.publicKey = publicKey;\n    options.signal = webauthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = (await navigator.credentials.get(options));\n    }\n    catch (err) {\n        throw identifyAuthenticationError({ error: err, options });\n    }\n    if (!credential) {\n        throw new Error('Authentication was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    let userHandle = undefined;\n    if (response.userHandle) {\n        userHandle = bufferToUTF8String(response.userHandle);\n    }\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            authenticatorData: bufferToBase64URLString(response.authenticatorData),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            signature: bufferToBase64URLString(response.signature),\n            userHandle,\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment),\n    };\n}\n\nasync function platformAuthenticatorIsAvailable() {\n    if (!browserSupportsWebAuthn()) {\n        return false;\n    }\n    return PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n}\n\nexport { browserSupportsWebAuthn, browserSupportsWebAuthnAutofill, platformAuthenticatorIsAvailable, startAuthentication, startRegistration };\n","import {browserSupportsWebAuthn} from '@simplewebauthn/browser';\n\n(function ($) {\n  /** global: Craft */\n  /** global: Garnish */\n  Craft.Auth2fa = Garnish.Base.extend(\n    {\n      $auth2faLoginFormContainer: null,\n      $auth2faSetupFormContainer: null,\n      $alternative2faLink: null,\n      $alternative2faTypesContainer: null,\n      $viewSetupBtns: null,\n      $errors: null,\n\n      $slideout: null,\n      $removeSetupButton: null,\n      $closeButton: null,\n      $verifyButton: null,\n\n      init: function (settings) {\n        this.$auth2faLoginFormContainer = $('#auth-2fa-form');\n        this.$auth2faSetupFormContainer = $('#auth-2fa-setup');\n        this.$alternative2faLink = $('#alternative-2fa');\n        this.$alternative2faTypesContainer = $('#alternative-2fa-types');\n        this.$viewSetupBtns = this.$auth2faSetupFormContainer.find(\n          'button.auth-2fa-view-setup'\n        );\n        this.$errors = $('#login-errors');\n\n        this.setSettings(settings, Craft.Auth2fa.defaults);\n\n        this.addListener(\n          this.$alternative2faLink,\n          'click',\n          'onAlternative2faTypeClick'\n        );\n        this.addListener(this.$viewSetupBtns, 'click', 'onViewSetupBtnClick');\n      },\n\n      show2faForm: function (auth2faForm, $loginDiv) {\n        this.$auth2faLoginFormContainer.html('').append(auth2faForm);\n        $loginDiv.addClass('auth-2fa');\n        $('#login-form-buttons').hide();\n        const $submitBtn = this.$auth2faLoginFormContainer.find('.submit');\n\n        this.onSubmitResponse($submitBtn);\n      },\n\n      getCurrent2faType: function ($container) {\n        let currentMethod = $container.attr('data-2fa-type');\n\n        if (currentMethod === undefined) {\n          currentMethod = null;\n        }\n\n        return currentMethod;\n      },\n\n      onViewSetupBtnClick: function (ev) {\n        const $button = $(ev.currentTarget);\n        $button.disable();\n        ev.preventDefault();\n\n        const data = {\n          selectedMethod: this.getCurrent2faType($button),\n        };\n\n        Craft.sendActionRequest('POST', this.settings.setupSlideoutHtml, {data})\n          .then((response) => {\n            this.slideout = new Craft.Slideout(response.data.html);\n\n            this.$errors = this.slideout.$container.find('.so-notice');\n            this.$closeButton = this.slideout.$container.find('button.close');\n\n            // initialise webauthn\n            if (\n              data.selectedMethod === 'craft\\\\auth\\\\type\\\\WebAuthn' &&\n              browserSupportsWebAuthn()\n            ) {\n              new Craft.WebAuthnSetup(this.slideout);\n            }\n\n            this.$verifyButton =\n              this.slideout.$container.find('#auth2fa-verify');\n            this.$removeSetupButton = this.slideout.$container.find(\n              '#auth-2fa-remove-setup'\n            );\n\n            this.addListener(this.$removeSetupButton, 'click', 'onRemoveSetup');\n            this.addListener(this.$closeButton, 'click', 'onClickClose');\n            this.addListener(this.$verifyButton, 'click', 'onVerify');\n            this.addListener(this.slideout.$container, 'keypress', (ev) => {\n              if (ev.keyCode === Garnish.RETURN_KEY) {\n                this.$verifyButton.trigger('click');\n              }\n            });\n\n            this.slideout.on('close', (ev) => {\n              this.$removeSetupButton = null;\n              this.slideout = null;\n              $button.enable();\n            });\n          })\n          .catch(({response}) => {\n            // Add the error message\n            Craft.cp.displayError(response.data.message);\n            $button.enable();\n          });\n      },\n\n      onClickClose: function (ev) {\n        this.slideout.close();\n      },\n\n      onRemoveSetup: function (ev) {\n        ev.preventDefault();\n\n        let currentMethod = this.getCurrent2faType(\n          this.slideout.$container.find('#setup-form-2fa')\n        );\n\n        if (currentMethod === undefined) {\n          currentMethod = null;\n        }\n\n        let data = {\n          currentMethod: currentMethod,\n        };\n\n        const confirmed = confirm(\n          Craft.t('app', 'Are you sure you want to delete this setup?')\n        );\n\n        if (confirmed) {\n          Craft.sendActionRequest('POST', this.settings.removeSetup, {data})\n            .then((response) => {\n              $(ev.currentTarget).remove();\n              Craft.cp.displayNotice(Craft.t('app', '2FA setup removed.'));\n            })\n            .catch((e) => {\n              Craft.cp.displayError(e.response.data.message);\n            })\n            .finally(() => {\n              this.slideout.close();\n            });\n        }\n      },\n\n      onVerify: function (ev) {\n        ev.preventDefault();\n\n        const $submitBtn = this.slideout.$container.find('#auth2fa-verify');\n\n        $submitBtn.addClass('loading');\n\n        let data = {\n          auth2faFields: {},\n          currentMethod: null,\n        };\n\n        data.auth2faFields = this._get2faFields(this.slideout.$container);\n        data.currentMethod = this._getCurrentMethodInput(\n          this.slideout.$container\n        );\n\n        Craft.sendActionRequest('POST', this.settings.saveSetup, {data})\n          .then((response) => {\n            this.onSubmitResponse($submitBtn);\n            Craft.cp.displayNotice(Craft.t('app', '2FA settings saved.'));\n            this.slideout.close();\n          })\n          .catch(({response}) => {\n            this.onSubmitResponse($submitBtn);\n\n            // Add the error message\n            this.showError(response.data.message);\n            Craft.cp.displayError(response.data.message);\n          });\n      },\n\n      onSubmitResponse: function ($submitBtn) {\n        $submitBtn.removeClass('loading');\n      },\n\n      showError: function (error, $errorsContainer = null) {\n        this.clearErrors();\n\n        $('<p class=\"error\" style=\"display: none;\">' + error + '</p>')\n          .appendTo($errorsContainer !== null ? $errorsContainer : this.$errors)\n          .velocity('fadeIn');\n      },\n\n      clearErrors: function ($errorsContainer = null) {\n        if ($errorsContainer !== null) {\n          $errorsContainer.empty();\n        } else {\n          this.$errors.empty();\n        }\n      },\n\n      onAlternative2faTypeClick: function (event) {\n        this.clearErrors();\n\n        let $btn = $(event.currentTarget);\n        $btn.attr('disabled', true).disable();\n\n        // get current authenticator class via data-2fa-type\n        let currentMethod = this.getCurrent2faType(\n          this.$auth2faLoginFormContainer.find('#verifyContainer')\n        );\n        if (currentMethod === null) {\n          this.$alternative2faLink.hide();\n          this.showError(\n            Craft.t('app', 'No alternative 2FA methods available.')\n          );\n        }\n\n        let data = {\n          currentMethod: currentMethod,\n          webAuthnSupported: browserSupportsWebAuthn(),\n        };\n\n        // get available 2FA methods, minus the one that's being shown\n        this.getAlternative2faTypes(data, $btn);\n      },\n\n      getAlternative2faTypes: function (data, $btn) {\n        Craft.sendActionRequest(\n          'POST',\n          this.settings.fetchAlternative2faTypes,\n          {\n            data,\n          }\n        )\n          .then((response) => {\n            if (response.data.alternativeTypes !== undefined) {\n              this.showAlternative2faTypes(response.data.alternativeTypes);\n            }\n          })\n          .catch(({response}) => {\n            this.showError(response.data.message);\n          })\n          .finally(() => {\n            $btn.attr('disabled', false).enable();\n          });\n      },\n\n      showAlternative2faTypes: function (data) {\n        this.$alternative2faTypesContainer.empty();\n        let alternativeTypes = Object.entries(data).map(([key, value]) => ({\n          key,\n          value,\n        }));\n        if (alternativeTypes.length > 0) {\n          alternativeTypes.forEach((type) => {\n            this.$alternative2faTypesContainer.append(\n              '<li><button ' +\n                'class=\"alternative-2fa-type\" ' +\n                'type=\"button\" ' +\n                'value=\"' +\n                type.key +\n                '\">' +\n                type.value.name +\n                '</button></li>'\n            );\n          });\n        } else {\n          this.showError(\n            Craft.t('app', 'No alternative 2FA methods available.')\n          );\n        }\n\n        // list them by name\n        this.$alternative2faLink\n          .hide()\n          .after(this.$alternative2faTypesContainer);\n\n        // clicking on a method name swaps the form fields\n        this.addListener(\n          $('.alternative-2fa-type'),\n          'click',\n          'onSelectAlternative2faType'\n        );\n      },\n\n      onSelectAlternative2faType: function (event) {\n        let $btn = $(event.currentTarget);\n        $btn.attr('disabled', true).disable();\n\n        const data = {\n          selectedMethod: $(event.currentTarget).attr('value'),\n        };\n\n        Craft.sendActionRequest('POST', this.settings.loadAlternative2faType, {\n          data,\n        })\n          .then((response) => {\n            if (response.data.auth2faForm !== undefined) {\n              this.$auth2faLoginFormContainer\n                .html('')\n                .append(response.data.auth2faForm);\n              this.$alternative2faTypesContainer.html('');\n              this.$alternative2faLink.show();\n              this.onSubmitResponse();\n            }\n          })\n          .catch(({response}) => {\n            //this.showError(response.data.message);\n          })\n          .finally(() => {\n            $btn.attr('disabled', false).enable();\n          });\n      },\n\n      _get2faFields: function ($container) {\n        let auth2faFields = {};\n\n        $container\n          .find('input[name^=\"auth2faFields[')\n          .each(function (index, element) {\n            let name = $(element).attr('id');\n            auth2faFields[name] = $(element).val();\n          });\n\n        return auth2faFields;\n      },\n\n      _getCurrentMethodInput: function ($container) {\n        return $container.find('input[name=\"currentMethod\"').val();\n      },\n    },\n    {\n      defaults: {\n        fetchAlternative2faTypes: 'auth/fetch-alternative-2fa-types',\n        loadAlternative2faType: 'auth/load-alternative-2fa-type',\n        setupSlideoutHtml: 'auth/setup-slideout-html',\n        saveSetup: 'auth/save-setup',\n        removeSetup: 'auth/remove-setup',\n      },\n    }\n  );\n})(jQuery);\n","import {startAuthentication} from '@simplewebauthn/browser';\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Auth2faLogin = {\n  loginWithPassword: false,\n  loginWithSecurityKey: false,\n\n  startWebauthnLogin: function (data, inModal = false) {\n    return Craft.sendActionRequest('POST', 'users/start-webauthn-login', {data})\n      .then((response) => {\n        const authenticationOptions = response.data.authenticationOptions;\n        const userId = response.data.userId;\n        const duration = response.data.duration;\n\n        try {\n          return startAuthentication(authenticationOptions)\n            .then((authResponse) => {\n              return Promise.resolve(\n                Craft.Auth2faLogin.verifyWebAuthnLogin(\n                  authenticationOptions,\n                  authResponse,\n                  userId,\n                  duration,\n                  inModal\n                )\n              );\n            })\n            .catch((authResponseError) => {\n              return Promise.reject({success: false, error: authResponseError});\n            });\n        } catch (error) {\n          return Promise.reject({success: false, error: error});\n        }\n      })\n      .catch((response) => {\n        return Promise.reject({success: false, error: response.error.message});\n      });\n  },\n\n  verifyWebAuthnLogin: function (\n    authenticationOptions,\n    authResponse,\n    userId,\n    duration,\n    inModal\n  ) {\n    let data = {\n      userId: userId,\n      authenticationOptions: JSON.stringify(authenticationOptions),\n      authResponse: JSON.stringify(authResponse),\n      duration: duration,\n    };\n\n    return Craft.sendActionRequest('POST', 'users/webauthn-login', {data})\n      .then((response) => {\n        if (inModal) {\n          return Promise.resolve({success: true});\n        } else {\n          return Promise.resolve({\n            success: true,\n            returnUrl: response.data.returnUrl,\n          });\n        }\n      })\n      .catch(({response}) => {\n        return Promise.reject({success: false, error: response.data.message});\n      });\n  },\n\n  submit2faCode: function ($auth2faLoginFormContainer, inModal = false) {\n    let data = {\n      auth2faFields: {},\n      currentMethod: null,\n    };\n\n    let auth2fa = new Craft.Auth2fa();\n\n    data.auth2faFields = auth2fa._get2faFields($auth2faLoginFormContainer);\n    data.currentMethod = auth2fa._getCurrentMethodInput(\n      $auth2faLoginFormContainer\n    );\n\n    return Craft.sendActionRequest('POST', 'users/verify-2fa', {data})\n      .then((response) => {\n        if (inModal) {\n          return Promise.resolve({success: true});\n        } else {\n          return Promise.resolve({\n            success: true,\n            returnUrl: response.data.returnUrl,\n          });\n        }\n      })\n      .catch(({response}) => {\n        return Promise.reject({success: false, error: response.data.message});\n      });\n  },\n};\n","import {browserSupportsWebAuthn} from '@simplewebauthn/browser';\nimport {startRegistration} from '@simplewebauthn/browser';\n\n(function ($) {\n  /** global: Craft */\n  /** global: Garnish */\n  Craft.WebAuthnSetup = Garnish.Base.extend(\n    {\n      $addSecurityKeyBtn: null,\n      $noticeContainer: null,\n      $keysTable: null,\n      slideout: null,\n\n      init: function (slideout, settings) {\n        this.slideout = slideout;\n        this.setSettings(settings, Craft.WebAuthnSetup.defaults);\n        this.$addSecurityKeyBtn = $('#add-security-key');\n        this.$noticeContainer = this.slideout.$container.find('.so-notice');\n        this.$keysTable = this.slideout.$container.find(\n          '#webauthn-security-keys'\n        );\n\n        if (!browserSupportsWebAuthn()) {\n          Craft.cp.displayError(\n            Craft.t('app', 'This browser does not support WebAuth.')\n          );\n          this.$addSecurityKeyBtn.disable();\n        }\n\n        this.addListener(\n          this.$addSecurityKeyBtn,\n          'click',\n          'onAddSecurityKeyBtn'\n        );\n\n        if (this.$keysTable !== null) {\n          this.addListener(\n            this.$keysTable.find('.delete'),\n            'click',\n            'onDeleteSecurityKey'\n          );\n        }\n      },\n\n      onAddSecurityKeyBtn: function (ev) {\n        if (!$(ev.currentTarget).hasClass('disabled')) {\n          this.showStatus(Craft.t('app', 'Waiting for elevated session'));\n          Craft.elevatedSessionManager.requireElevatedSession(\n            this.startWebAuthRegistration.bind(this),\n            this.failedElevation.bind(this)\n          );\n        }\n      },\n\n      failedElevation: function () {\n        this.clearStatus();\n      },\n\n      startWebAuthRegistration: function () {\n        this.clearStatus();\n\n        // GET registration options from the endpoint that calls\n        Craft.sendActionRequest(\n          'POST',\n          this.settings.generateRegistrationOptions\n        )\n          .then((response) => {\n            const registrationOptions = response.data.registrationOptions;\n            try {\n              this.showStatus(Craft.t('app', 'Starting registration'));\n              const credentialName = Craft.escapeHtml(\n                prompt(\n                  Craft.t('app', 'Please enter a name for the security key')\n                )\n              );\n              startRegistration(registrationOptions)\n                .then((regResponse) => {\n                  this.verifyWebAuthnRegistration(regResponse, credentialName);\n                })\n                .catch((regResponseError) => {\n                  this.showStatus(\n                    Craft.t('app', 'Registration failed:') +\n                      ' ' +\n                      regResponseError.message,\n                    'error'\n                  );\n                });\n            } catch (error) {\n              this.showStatus(error, 'error');\n            }\n          })\n          .catch(({response}) => {\n            this.showStatus(response.data.message, 'error');\n          });\n      },\n\n      verifyWebAuthnRegistration: function (\n        startRegistrationResponse,\n        credentialName\n      ) {\n        this.showStatus(Craft.t('app', 'Starting verification'));\n        let data = {\n          credentials: JSON.stringify(startRegistrationResponse),\n          credentialName: credentialName,\n        };\n\n        // POST the response to the endpoint\n        Craft.sendActionRequest('POST', this.settings.verifyRegistration, {\n          data,\n        })\n          .then((response) => {\n            this.clearStatus();\n            // Show UI appropriate for the `verified` status\n            if (response.data.verified) {\n              Craft.cp.displaySuccess(\n                Craft.t('app', 'Security key registered.')\n              );\n              if (response.data.html) {\n                this.slideout.$container.html(response.data.html);\n                this.init(this.slideout); //reinitialise\n              }\n            } else {\n              this.showStatus('Something went wrong!', 'error');\n            }\n          })\n          .catch(({response}) => {\n            this.showStatus(response.data.message, 'error');\n          });\n      },\n\n      onDeleteSecurityKey: function (ev) {\n        ev.preventDefault();\n\n        const $uid = $(ev.currentTarget).attr('data-uid');\n        const credentialName = $(ev.currentTarget)\n          .parents('tr')\n          .find('[data-name=\"credentialName\"]')\n          .text();\n\n        let data = {\n          uid: $uid,\n        };\n\n        const confirmed = confirm(\n          Craft.t(\n            'app',\n            'Are you sure you want to delete ‘{credentialName}‘ security key?',\n            {credentialName: credentialName}\n          )\n        );\n\n        if ($uid !== undefined && confirmed) {\n          Craft.sendActionRequest('POST', this.settings.deleteSecurityKey, {\n            data,\n          })\n            .then((response) => {\n              Craft.cp.displaySuccess(response.data.message);\n              if (response.data.html) {\n                this.slideout.$container.html(response.data.html);\n                this.init(this.slideout); //reinitialise\n              }\n            })\n            .catch(({response}) => {\n              this.showStatus(response.data.message, 'error');\n            });\n        }\n      },\n\n      showStatus: function (message, type) {\n        //Craft.cp.displayError(message);\n        if (type == 'error') {\n          this.$noticeContainer.addClass('error');\n        } else {\n          this.$noticeContainer.removeClass('error');\n        }\n        this.$noticeContainer.text(message);\n      },\n\n      clearStatus: function () {\n        this.$noticeContainer.text('');\n      },\n    },\n    {\n      defaults: {\n        generateRegistrationOptions: 'auth/generate-registration-options',\n        verifyRegistration: 'auth/verify-registration',\n        deleteSecurityKey: 'auth/delete-security-key',\n      },\n    }\n  );\n})(jQuery);\n"],"names":["bufferToBase64URLString","buffer","bytes","Uint8Array","str","charCode","String","fromCharCode","btoa","replace","base64URLStringToBuffer","base64URLString","base64","padLength","length","padded","padEnd","binary","atob","ArrayBuffer","i","charCodeAt","browserSupportsWebAuthn","undefined","window","PublicKeyCredential","toPublicKeyCredentialDescriptor","descriptor","id","transports","isValidDomain","hostname","test","WebAuthnError","Error","constructor","message","name","super","this","webauthnAbortService","createNewAbortSignal","controller","abort","newController","AbortController","signal","attachments","toAuthenticatorAttachment","attachment","indexOf","async","startAuthentication","requestOptionsJSON","useBrowserAutofill","_a","_b","allowCredentials","map","publicKey","challenge","options","globalPublicKeyCredential","isConditionalMediationAvailable","browserSupportsWebAuthnAutofill","document","querySelectorAll","mediation","credential","navigator","credentials","get","err","error","effectiveDomain","location","rpId","identifyAuthenticationError","rawId","response","type","userHandle","value","TextDecoder","decode","authenticatorData","clientDataJSON","signature","clientExtensionResults","getClientExtensionResults","authenticatorAttachment","$","jQuery","Craft","Auth2fa","Garnish","Base","extend","$auth2faLoginFormContainer","$auth2faSetupFormContainer","$alternative2faLink","$alternative2faTypesContainer","$viewSetupBtns","$errors","$slideout","$removeSetupButton","$closeButton","$verifyButton","init","settings","find","setSettings","defaults","addListener","show2faForm","auth2faForm","$loginDiv","html","append","addClass","hide","$submitBtn","onSubmitResponse","getCurrent2faType","$container","currentMethod","attr","onViewSetupBtnClick","ev","$button","currentTarget","disable","preventDefault","data","selectedMethod","sendActionRequest","setupSlideoutHtml","then","slideout","Slideout","WebAuthnSetup","keyCode","RETURN_KEY","trigger","on","enable","cp","displayError","onClickClose","close","onRemoveSetup","confirm","t","removeSetup","remove","displayNotice","e","onVerify","auth2faFields","_get2faFields","_getCurrentMethodInput","saveSetup","showError","removeClass","$errorsContainer","clearErrors","appendTo","velocity","empty","onAlternative2faTypeClick","event","$btn","webAuthnSupported","getAlternative2faTypes","fetchAlternative2faTypes","alternativeTypes","showAlternative2faTypes","Object","entries","key","forEach","after","onSelectAlternative2faType","loadAlternative2faType","show","each","index","element","val","Auth2faLogin","loginWithPassword","loginWithSecurityKey","startWebauthnLogin","inModal","authenticationOptions","userId","duration","authResponse","Promise","resolve","verifyWebAuthnLogin","authResponseError","reject","success","JSON","stringify","returnUrl","submit2faCode","auth2fa","$addSecurityKeyBtn","$noticeContainer","$keysTable","onAddSecurityKeyBtn","hasClass","showStatus","elevatedSessionManager","requireElevatedSession","startWebAuthRegistration","bind","failedElevation","clearStatus","generateRegistrationOptions","registrationOptions","credentialName","escapeHtml","prompt","creationOptionsJSON","user","TextEncoder","encode","excludeCredentials","create","authenticatorSelection","requireResidentKey","userVerification","pubKeyCredParams","filter","param","rp","byteLength","identifyRegistrationError","getTransports","attestationObject","startRegistration","regResponse","verifyWebAuthnRegistration","regResponseError","startRegistrationResponse","verifyRegistration","verified","displaySuccess","onDeleteSecurityKey","$uid","parents","text","uid","confirmed","deleteSecurityKey"],"sourceRoot":""}