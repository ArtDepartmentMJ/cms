{% import "_includes/forms" as forms %}

{{ forms.entryTypeField({
    label: 'Entry Types',
    instructions: 'Choose the types of entries that can be created in this field.'|t('app'),
    id: 'entry-types',
    name: 'entryTypes',
    options: entryTypeOptions,
    values: field.getEntryTypes()|map(entryType => entryType.id),
    multi: true,
    errors: field.getErrors('entryTypes'),
}) }}

{% if craft.app.getIsMultiSite() %}
    {{ forms.selectField({
        label: 'Propagation Method'|t('app'),
        instructions: 'Which sites should entries be saved to?'|t('app'),
        id: 'propagationMethod',
        name: 'propagationMethod',
        options: [
            { value: 'none', label: 'Only save entries to the site they were created in'|t('app') },
            { value: 'siteGroup', label: 'Save entries to other sites in the same site group'|t('app') },
            { value: 'language', label: 'Save entries to other sites with the same language'|t('app') },
            { value: 'all', label: 'Save entries to all sites the owner element is saved in'|t('app') },
            { value: 'custom', label: 'Custom…'|t('app') },
        ],
        value: field.propagationMethod.value,
        toggle: true,
        targetPrefix: 'propagation-method-',
    }) }}

    {% tag 'div' with {
        id: 'propagation-method-custom',
        class: field.propagationMethod.value != 'custom' ? 'hidden' : null,
    } %}
        {{ forms.textField({
            label: 'Propagation Key Format'|t('app'),
            instructions: 'Template that defines the field’s custom “propagation key” format. Entries will be saved to all sites that produce the same key.'|t('app'),
            id: 'propagation-key-format',
            class: 'code',
            name: 'propagationKeyFormat',
            value: field.propagationKeyFormat,
            errors: field.getErrors('propagationKeyFormat'),
        }) }}
    {% endtag %}

    {% if field.id and field.propagationMethod.value != 'none' %}
        {% js %}
            (function() {
                var showingWarning = false;
                $("#{{ 'propagationMethod'|namespaceInputId }}").on('change', function() {
                    if ($(this).val() !== '{{ field.propagationMethod.value }}') {
                        if (!showingWarning) {
                            $('<p/>', {'class': 'warning', text: "{{ 'Applying this change to existing entries can take some time.'|t('app')|e('js') }}"})
                                .appendTo($("#{{ 'propagationMethod-field'|namespaceInputId }}"));
                            showingWarning = true;
                        }
                    } else if (showingWarning) {
                        $("#{{ 'propagationMethod-field'|namespaceInputId }} .warning").remove();
                        showingWarning = false;
                    }
                });
            })();
        {% endjs %}
    {% endif %}
{% endif %}

{{ forms.textField({
    label: 'Min {type}'|t('app', {
        type: 'Entries'|t('app'),
    }),
    instructions: 'The minimum number of {type} the field is allowed to have.'|t('app', {
        type: 'entries'|t('app'),
    }),
    id: 'min-entries',
    name: 'minEntries',
    value: field.minEntries,
    size: 3,
    errors: field.getErrors('minEntries'),
}) }}

{{ forms.textField({
    label: 'Max {type}'|t('app', {
        type: 'Entries'|t('app'),
    }),
    instructions: 'The maximum number of {type} the field is allowed to have.'|t('app', {
        type: 'entries'|t('app'),
    }),
    id: 'max-entries',
    name: 'maxEntries',
    value: field.maxEntries,
    size: 3,
    errors: field.getErrors('maxEntries')
}) }}

<hr>

{{ forms.selectField({
    label: 'View Mode'|t('app'),
    instructions: 'Choose how nested entries should be presented to authors.'|t('app'),
    id: 'view-mode',
    name: 'viewMode',
    options: [
        {label: 'As inline blocks'|t('app'), value: constant('VIEW_MODE_BLOCKS', field)},
        {label: 'As an element index'|t('app'), value: constant('VIEW_MODE_INDEX', field)},
    ],
    value: field.viewMode,
    toggle: true,
    targetPrefix: 'view-mode--',
}) }}

{% tag 'div' with {
    id: "view-mode--#{constant('VIEW_MODE_INDEX', field)}",
    class: field.viewMode != constant('VIEW_MODE_INDEX', field) ? 'hidden' : null,
} %}
    {{ forms.lightswitchField({
        label: 'Include Table View'|t('app'),
        instructions: 'Whether the element index should allow viewing nested {type} in a table.'|t('app', {
            type: 'entries'|t('app'),
        }),
        id: 'include-table-view',
        name: 'includeTableView',
        on: field.includeTableView,
    }) }}

    {{ forms.selectField({
        label: '{type} Per Page'|t('app', {
            type: 'Entries'|t('app'),
        }),
        instructions: 'The total number of {type} to display per page within the element index.'|t('app', {
            type: 'entries'|t('app'),
        }),
        id: 'page-size',
        name: 'pageSize',
        options: [10, 20, 50, 100]|map(num => {label: num, value: num}),
        value: field.pageSize ?? 50,
    }) }}
{% endtag %}
